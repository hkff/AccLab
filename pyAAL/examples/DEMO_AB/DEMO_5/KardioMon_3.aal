 // 29/9/2015
// KardioMonPolicy
// location processing: if only cardioMon peu utile
// TODO transfer or storage ?

// Loading types & macros libraries
LOAD "core.types"
LOAD "core.macros"

/***************************
 *       Declarations
 ****************************/
// Actors
AGENT cardioMon TYPES(DataProcessor ) REQUIRED() PROVIDED(read write update delete )
AGENT wearableCo TYPES(DataController ) REQUIRED(read write update delete ) PROVIDED()
AGENT customer TYPES(DataSubject ) REQUIRED() PROVIDED()
AGENT mapOnWeb TYPES(DataProcessor ) REQUIRED() PROVIDED()
AGENT dataSpacer TYPES(DataProcessor ) REQUIRED() PROVIDED()
AGENT auditor TYPES(Auditor) REQUIRED() PROVIDED()

// Services
SERVICE read
SERVICE write
SERVICE update
SERVICE delete
SERVICE notify
SERVICE transfer

LOAD "DEMO_AB.DEMO_5.wtypes"
LOAD "DEMO_AB.DEMO_5.locations"


/***************************
 *       Clauses
 ****************************/
 // result from the translation of (some) privacy information 
 // with some grouping and simplification from the security expert
CLAUSE cardioMonPolicy (  
  // Customer
  (FORALL c:Customer FORALL d:data IF (d.subject==c)
        THEN {PERMIT c.read[cardioMon](d) AND PERMIT c.write[cardioMon](d) AND PERMIT c.update[cardioMon](d) AND PERMIT c.delete[cardioMon](d)})
  AND
 // lines 1,2,7,8,12
    (FORALL a:Actor FORALL d:UserName IF  ((a==cardioMon) OR @Employee(a) OR (a==mapOnWeb))
        THEN {DENY a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:Password IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:TrainingActivity IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:Height IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:Weight IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
  AND 
 // lines 3,4,5
     (FORALL d:UserId (PERMIT cardioMon.read[cardioMon](d) AND (FORALL e:Employee PERMIT e.read[cardioMon](d)) AND DENY mapOnWeb.read[cardioMon](d)))
    AND (FORALL d:DisplayName (PERMIT cardioMon.read[cardioMon](d) AND (FORALL e:Employee PERMIT e.read[cardioMon](d)) AND DENY mapOnWeb.read[cardioMon](d)))
    AND (FORALL d:Gender  (PERMIT cardioMon.read[cardioMon](d) AND (FORALL e:Employee PERMIT e.read[cardioMon](d)) AND DENY mapOnWeb.read[cardioMon](d)))
    AND (FORALL a:Actor FORALL d:UserId IF  ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:DisplayName IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:Gender IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
  AND
 // lines 6,13
     (FORALL a:Actor FORALL d:Age IF  ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {PERMIT a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)})
    AND (FORALL a:Actor FORALL d:Country IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {PERMIT a.read[cardioMon](d) AND DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
  AND
 // lines 9,10,11 
      (FORALL d:SugarLevel (DENY cardioMon.read[cardioMon](d) AND (FORALL e:Employee DENY e.read[cardioMon](d)) AND PERMIT mapOnWeb.read[cardioMon](d)))
    AND (FORALL d:BloodPressure (DENY cardioMon.read[cardioMon](d) AND (FORALL e:Employee DENY e.read[cardioMon](d)) AND PERMIT mapOnWeb.read[cardioMon](d)))
    AND (FORALL d:Heartbeat (DENY cardioMon.read[cardioMon](d) AND (FORALL e:Employee DENY e.read[cardioMon](d)) AND PERMIT mapOnWeb.read[cardioMon](d)))
    AND (FORALL a:Actor FORALL d:SugarLevel IF  ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:BloodPressure IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 
    AND (FORALL a:Actor FORALL d:Heartbeat IF ((a==cardioMon) OR (@Employee(a)) OR (a==mapOnWeb))
        THEN {DENY a.write[cardioMon](d) AND DENY a.update[cardioMon](d)}) 

// data retention 
// From DPPT: The data retention period (period after which data will be deleted by CardioMon) is 6 month
    AND (FORALL ds:Sensitive  MUST( cardioMon.delete[cardioMon](ds) BEFORE "6 month"))
    
 // data transfer 
 // From DPPT: Kardio - Mon has a data transfer policy country where data will be transferred is Greece
	AND (FORALL d:Sensitive FORALL a:Actor IF (@Greece(a)) THEN {PERMIT cardioMon.transfer[a](d)}) 
	AND (FORALL d:Sensitive FORALL a:Actor IF (NOT @Greece(a)) THEN {DENY cardioMon.transfer[a](d)}) 

     // fill audit expression 
	AUDITING (ALWAYS (auditor.audit[cardioMon](wearableCo)))
    // fill rectification expression
	IF_VIOLATED_THEN (FORALL c:Customer auditor.notify[c](dataBreach))
)

// quite complete werableCo to Employee policy
CLAUSE wearableCoToEmployeePolicy (  
	(FORALL e:Employee FORALL d:UserName (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:TrainingActivity (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:Password (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:Height (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:Weight (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:SugarLevel (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:BloodPressure (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:Heartbeat (DENY e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:UserId (PERMIT e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:DisplayName (PERMIT e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:Gender (PERMIT e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
	AND (FORALL e:Employee FORALL d:Age (PERMIT e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))
    AND (FORALL e:Employee FORALL d:Country (PERMIT e.read[cardioMon](d) AND DENY e.write[cardioMon](d) AND DENY e.update[cardioMon](d)))

// data retention 
// From DPPT: WearableCo expects a data retention period of 3 months -> 7months
   AND  (FORALL ds:Sensitive MUST(cardioMon.delete[cardioMon](ds) BEFORE "7 month"))  

// data transfer 
// From DPPT: Wearable Co defines Germany as a Location where data can be transferred
// DATA: sensitive ACTION: transfer SOURCE: cardioMon TARGET-LOCATION : germany
	AND  (FORALL d:Sensitive FORALL a:Actor IF (@Greece(a)) THEN {PERMIT cardioMon.transfer[a](d)}) 












    // fill audit expression 
	AUDITING (ALWAYS (auditor.audit[cardioMon](wearableCo)))
    // fill rectification expression
	IF_VIOLATED_THEN (FORALL c:Customer auditor.notify[c](dataBreach))
	)
	













// TESTING
//---------------------------
// CALL check_aal()
//CALL sat_ue("cardioMonPolicy") // 
//CALL sat_ue("wearableCoToEmployeePolicy") // 

// check the compliance of WearableCo policy with Kardio-Mon policy
//CALL validate_usage_neg("cardioMonPolicy" "wearableCoToEmployeePolicy")










// ----------------- COMMENTS
// 1) show clause transfer for KardioMon
// 2) detail the one for WearableCo
// 3) compiance failed
// 4) same process to identify and fix the problem

// Greece => Germany NOT compliant
// Germany should be Greece or WearableCo change for another provider
// EEA => Germany VALID 

/**
// checking and finding conflict
// TODO check unsat ??? 
// We need more details about the context
// an an hypothesis which can be inferred from the context
ENV """
(always ![a] (Germany(a) => ~Greece(a)))
& (sometime ?[d, a] (Sensitive(d) & Actor(a) & Germany(a)))
"""

// CALL validate_usage_and("cardioMonPolicy" "wearableCoToEmployeePolicy")
// UNSAT

// Check conflict ? patine
CALL ecompliance("cardioMonPolicy" "wearableCoToEmployeePolicy")
*/
CALL wvalidate_usage_neg("cardioMonPolicy" "wearableCoToEmployeePolicy")
