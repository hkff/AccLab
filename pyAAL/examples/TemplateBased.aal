// Loading aal libs
LOAD "core.types"
LOAD "core.macros"

//=====================================================//
//================== Defining actors ==================//
//=====================================================//

/*
 * Wearable Customer
 * The end user of the Wearable Service
 * Individual Cloud Subject
 * Data Subject
 */
AGENT customer2 TYPES(DataSubject)
    REQUIRED(createCustomerProfile  login  add  edit  update  delete  submitRTI
             requestRTI  updateWellbeing  getWellbeingTraining  getWellbeingScore
             requestStat  requestDataPath  receiveAlerts  receivePVA  receiveBreachNotif)
    PROVIDED()

/*
 * Wearable Co
 * The SME operating the Wearable Service
 * Organisational Cloud Customer
 * Data Controller
 */
AGENT wearableCo TYPES(DataController)
    REQUIRED(createBusinessProfile  login  add  edit  update  delete  manageBusinessFormula
             updateThresholds  viewActiveUsers  requestStat  requestDataCompliance  receivePVA
             receiveBreachNotif)
    PROVIDED()

/*
 * CardioMon
 * A SaaS SME cloud provider offering the Wearable Service
 * Cloud Provider
 * Data Processor
 */
AGENT cardioMon TYPES(DataProcessor)
    REQUIRED()
    PROVIDED(createCustomerProfile  login  add  edit  update  delete  submitRTI  requestRTI  updateWellbeing
             getWellbeingTraining  getWellbeingScore  requestStat  requestDataPath  receiveAlerts  receivePVA
             receiveBreachNotif  createBusinessProfile manageBusinessFormula updateThresholds  viewActiveUsers
             requestDataCompliance)

/*
 * Map-on-Web
 * A SaaS cloud provider allowing the creation of maps overlaid with annotated itineraries, based on annotated GPX traces
 * Cloud Provider
 * Data Processor
 */
AGENT mapOnWeb TYPES(DataProcessor)
    REQUIRED()
    PROVIDED()

/*
 * DataSpacer
 * An IaaS cloud provider operating an OpenStack-based cloud environment for processing and hosting different types of data
 * Cloud Provider
 * Data Processor
 */
AGENT dataSpacer TYPES(DataProcessor)
    REQUIRED()
    PROVIDED()

//=====================================================//
//================= Defining services =================//
//=====================================================//

SERVICE createCustomerProfile
SERVICE createBusinessProfile
SERVICE login
SERVICE add
SERVICE edit
SERVICE update
SERVICE delete
SERVICE submitRTI
SERVICE requestRTI
SERVICE updateWellbeing
SERVICE getWellbeingTraining
SERVICE getWellbeingScore
SERVICE manageBusinessFormula
SERVICE updateThresholds
SERVICE viewActiveUsers
SERVICE requestStat
SERVICE requestDataCompliance
SERVICE requestDataPath
SERVICE receiveAlerts
SERVICE receivePVA
SERVICE receiveTVA
SERVICE receiveBreachNotif

/***************************
 *       Clauses
 ****************************/
 
CLAUSE cardiomon_clause (
    FORALL d:data FORALL a:agent
    IF(d.subject == a) THEN {
        PERMIT a.read[cardioMon](d)
        AND PERMIT a.write[cardioMon](d)
        AND PERMIT a.update[cardioMon](d)
        AND PERMIT a.delete[cardioMon](d)
        AND PERMIT a.login[cardioMon](d)
    }
    AND
    IF (d.subject == a) THEN {
    	 MUST( cardioMon.delete[cardioMon](d) BEFORE "6 months") 
    }
    	AUDITING auditor.audit[cardioMon](a)
    	IF_VIOLATED_THEN dpa.sanction[cardioMon](a) 
)

CLAUSE customer2_clause (
    FORALL d:data
    IF(d.subject == customer2) THEN {
        PERMIT customer2.read[cardioMon](d)
        AND PERMIT customer2.write[cardioMon](d)
        AND PERMIT customer2.update[cardioMon](d)
        AND PERMIT customer2.delete[cardioMon](d)
        AND PERMIT customer2.login[cardioMon](d)
    }
    AND
    IF (d.subject == customer2) THEN {
    	 MUST( cardioMon.delete[cardioMon](d) BEFORE "6 months") 
    }
    	AUDITING auditor.audit[cardioMon](a)
    	IF_VIOLATED_THEN dpa.sanction[cardioMon](a) 
)
CALL validate("cardiomon_clause" "customer2_clause")
