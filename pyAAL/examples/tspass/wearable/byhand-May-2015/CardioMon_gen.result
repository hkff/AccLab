
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For initial clauses:
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For universal clauses:
57[0:Inp] || username(U) -> sensitive(U)*.    -> 57[0:Inp] || username(U,V) -> sensitive(U,V)*.
58[0:Inp] || age(U)* -> sensitive(U).    -> 58[0:Inp] || age(U,V)* -> sensitive(U,V).
59[0:Inp] || sugarlevel(U) -> sensitive(U)*.    -> 59[0:Inp] || sugarlevel(U,V) -> sensitive(U,V)*.
60[0:Inp] || password(U)* -> sensitive(U).    -> 60[0:Inp] || password(U,V)* -> sensitive(U,V).
61[0:Inp] || weight(U) -> sensitive(U)*.    -> 61[0:Inp] || weight(U,V) -> sensitive(U,V)*.
62[0:Inp] || height(U)* -> sensitive(U).    -> 62[0:Inp] || height(U,V)* -> sensitive(U,V).
63[0:Inp] || userid(U) -> sensitive(U)*.    -> 63[0:Inp] || userid(U,V) -> sensitive(U,V)*.
64[0:Inp] || blood(U)* -> sensitive(U).    -> 64[0:Inp] || blood(U,V)* -> sensitive(U,V).
65[0:Inp] || heart(U)* -> sensitive(U).    -> 65[0:Inp] || heart(U,V)* -> sensitive(U,V).
66[0:Inp] || training(U) -> sensitive(U)*.    -> 66[0:Inp] || training(U,V) -> sensitive(U,V)*.
68[0:Inp] || display(U)* -> public(U).    -> 68[0:Inp] || display(U,V)* -> public(U,V).
69[0:Inp] || gender(U)* -> public(U).    -> 69[0:Inp] || gender(U,V)* -> public(U,V).
70[0:Inp] || country(U)* -> public(U).    -> 70[0:Inp] || country(U,V)* -> public(U,V).
72[0:Inp] || public(U) -> data(U)*.    -> 72[0:Inp] || public(U,V) -> data(U,V)*.
73[0:Inp] || sensitive(U) -> data(U)*.    -> 73[0:Inp] || sensitive(U,V) -> data(U,V)*.
53[0:Inp] || delete(U,V) -> Pdelete(U,V)*.    -> 53[0:Inp] || delete(U,V,W) -> Pdelete(U,V,W)*.
54[0:Inp] || update(U,V) -> Pupdate(U,V)*.    -> 54[0:Inp] || update(U,V,W) -> Pupdate(U,V,W)*.
55[0:Inp] || write(U,V) -> Pwrite(U,V)*.    -> 55[0:Inp] || write(U,V,W) -> Pwrite(U,V,W)*.
56[0:Inp] || read(U,V) -> Pread(U,V)*.    -> 56[0:Inp] || read(U,V,W) -> Pread(U,V,W)*.
74[0:Inp] || data(U)* -> sensitive(U) public(U).    -> 74[0:Inp] || data(U,V)* -> sensitive(U,V) public(U,V).
71[0:Inp] || public(U) -> country(U)* gender(U) display(U).    -> 71[0:Inp] || public(U,V) -> country(U,V)* gender(U,V) display(U,V).
4[0:Inp] || customer(U) subject(V,U)* country(V) -> Pread(CardioMon,V)*.    -> 4[0:Inp] || customer(U,V) subject(U,W,V)* country(U,W) -> Pread(U,CardioMon,W)*.
32[0:Inp] || customer(U) subject(V,U)* age(V) -> Pread(CardioMon,V)*.    -> 32[0:Inp] || customer(U,V) subject(U,W,V)* age(U,W) -> Pread(U,CardioMon,W)*.
36[0:Inp] || customer(U) subject(V,U)* gender(V) -> Pread(CardioMon,V)*.    -> 36[0:Inp] || customer(U,V) subject(U,W,V)* gender(U,W) -> Pread(U,CardioMon,W)*.
40[0:Inp] || customer(U) subject(V,U)* display(V) -> Pread(CardioMon,V)*.    -> 40[0:Inp] || customer(U,V) subject(U,W,V)* display(U,W) -> Pread(U,CardioMon,W)*.
44[0:Inp] || customer(U) subject(V,U)* userid(V) -> Pread(CardioMon,V)*.    -> 44[0:Inp] || customer(U,V) subject(U,W,V)* userid(U,W) -> Pread(U,CardioMon,W)*.
1[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* country(V) -> .    -> 1[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* country(U,W) -> .
2[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* country(V) -> .    -> 2[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* country(U,W) -> .
3[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* country(V) -> .    -> 3[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* country(U,W) -> .
5[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* training(V) -> .    -> 5[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
6[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* training(V) -> .    -> 6[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
7[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* training(V) -> .    -> 7[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
8[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* training(V) -> .    -> 8[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
9[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* heart(V) -> .    -> 9[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
10[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* heart(V) -> .    -> 10[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
11[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* heart(V) -> .    -> 11[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
12[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* heart(V) -> .    -> 12[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
13[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* blood(V) -> .    -> 13[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
14[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* blood(V) -> .    -> 14[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
15[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* blood(V) -> .    -> 15[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
16[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* blood(V) -> .    -> 16[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
17[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* sugarlevel(V) -> .    -> 17[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
18[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* sugarlevel(V) -> .    -> 18[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
19[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* sugarlevel(V) -> .    -> 19[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
20[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* sugarlevel(V) -> .    -> 20[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
21[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* weight(V) -> .    -> 21[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
22[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* weight(V) -> .    -> 22[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
23[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* weight(V) -> .    -> 23[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
24[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* weight(V) -> .    -> 24[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
25[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* height(V) -> .    -> 25[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
26[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* height(V) -> .    -> 26[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
27[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* height(V) -> .    -> 27[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
28[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* height(V) -> .    -> 28[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
29[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* age(V) -> .    -> 29[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* age(U,W) -> .
30[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* age(V) -> .    -> 30[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* age(U,W) -> .
31[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* age(V) -> .    -> 31[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* age(U,W) -> .
33[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* gender(V) -> .    -> 33[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* gender(U,W) -> .
34[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* gender(V) -> .    -> 34[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* gender(U,W) -> .
35[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* gender(V) -> .    -> 35[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* gender(U,W) -> .
37[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* display(V) -> .    -> 37[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* display(U,W) -> .
38[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* display(V) -> .    -> 38[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* display(U,W) -> .
39[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* display(V) -> .    -> 39[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* display(U,W) -> .
41[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* userid(V) -> .    -> 41[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* userid(U,W) -> .
42[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* userid(V) -> .    -> 42[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* userid(U,W) -> .
43[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* userid(V) -> .    -> 43[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* userid(U,W) -> .
45[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* password(V) -> .    -> 45[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
46[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* password(V) -> .    -> 46[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
47[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* password(V) -> .    -> 47[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
48[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* password(V) -> .    -> 48[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
49[0:Inp] || customer(U) Pupdate(CardioMon,V)* subject(V,U)* username(V) -> .    -> 49[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
50[0:Inp] || customer(U) Pdelete(CardioMon,V)* subject(V,U)* username(V) -> .    -> 50[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
51[0:Inp] || customer(U) Pwrite(CardioMon,V)* subject(V,U)* username(V) -> .    -> 51[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
52[0:Inp] || customer(U) Pread(CardioMon,V)* subject(V,U)* username(V) -> .    -> 52[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
67[0:Inp] || sensitive(U) -> training(U) heart(U) blood(U) userid(U) height(U) weight(U) password(U) sugarlevel(U) age(U)* username(U).    -> 67[0:Inp] || sensitive(U,V) -> training(U,V) heart(U,V) blood(U,V) userid(U,V) height(U,V) weight(U,V) password(U,V) sugarlevel(U,V) age(U,V)* username(U,V).
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
Non-Skolem constants contained in the problem: CardioMon
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
Weight of the temporal successor function set to 1.
Step clauses:
--------------------------TSPASS-START-----------------------------
Input Problem:
1[0:Inp] || sensitive(U,V) -> data(U,V)*.
2[0:Inp] || public(U,V) -> data(U,V)*.
3[0:Inp] || country(U,V)* -> public(U,V).
4[0:Inp] || gender(U,V)* -> public(U,V).
5[0:Inp] || display(U,V)* -> public(U,V).
6[0:Inp] || training(U,V) -> sensitive(U,V)*.
7[0:Inp] || heart(U,V)* -> sensitive(U,V).
8[0:Inp] || blood(U,V)* -> sensitive(U,V).
9[0:Inp] || userid(U,V) -> sensitive(U,V)*.
10[0:Inp] || height(U,V)* -> sensitive(U,V).
11[0:Inp] || weight(U,V) -> sensitive(U,V)*.
12[0:Inp] || password(U,V)* -> sensitive(U,V).
13[0:Inp] || sugarlevel(U,V) -> sensitive(U,V)*.
14[0:Inp] || age(U,V)* -> sensitive(U,V).
15[0:Inp] || username(U,V) -> sensitive(U,V)*.
16[0:Inp] || read(U,V,W) -> Pread(U,V,W)*.
17[0:Inp] || write(U,V,W) -> Pwrite(U,V,W)*.
18[0:Inp] || update(U,V,W) -> Pupdate(U,V,W)*.
19[0:Inp] || delete(U,V,W) -> Pdelete(U,V,W)*.
20[0:Inp] || data(U,V)* -> sensitive(U,V) public(U,V).
21[0:Inp] || public(U,V) -> country(U,V)* gender(U,V) display(U,V).
22[0:Inp] || customer(U,V) subject(U,W,V)* userid(U,W) -> Pread(U,CardioMon,W)*.
23[0:Inp] || customer(U,V) subject(U,W,V)* display(U,W) -> Pread(U,CardioMon,W)*.
24[0:Inp] || customer(U,V) subject(U,W,V)* gender(U,W) -> Pread(U,CardioMon,W)*.
25[0:Inp] || customer(U,V) subject(U,W,V)* age(U,W) -> Pread(U,CardioMon,W)*.
26[0:Inp] || customer(U,V) subject(U,W,V)* country(U,W) -> Pread(U,CardioMon,W)*.
27[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
28[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
29[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
30[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* username(U,W) -> .
31[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
32[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
33[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
34[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* password(U,W) -> .
35[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* userid(U,W) -> .
36[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* userid(U,W) -> .
37[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* userid(U,W) -> .
38[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* display(U,W) -> .
39[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* display(U,W) -> .
40[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* display(U,W) -> .
41[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* gender(U,W) -> .
42[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* gender(U,W) -> .
43[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* gender(U,W) -> .
44[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* age(U,W) -> .
45[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* age(U,W) -> .
46[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* age(U,W) -> .
47[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
48[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
49[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
50[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* height(U,W) -> .
51[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
52[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
53[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
54[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* weight(U,W) -> .
55[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
56[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
57[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
58[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* sugarlevel(U,W) -> .
59[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
60[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
61[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
62[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* blood(U,W) -> .
63[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
64[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
65[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
66[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* heart(U,W) -> .
67[0:Inp] || customer(U,V) Pread(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
68[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
69[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
70[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* training(U,W) -> .
71[0:Inp] || customer(U,V) Pwrite(U,CardioMon,W)* subject(U,W,V)* country(U,W) -> .
72[0:Inp] || customer(U,V) Pdelete(U,CardioMon,W)* subject(U,W,V)* country(U,W) -> .
73[0:Inp] || customer(U,V) Pupdate(U,CardioMon,W)* subject(U,W,V)* country(U,W) -> .
74[0:Inp] || sensitive(U,V) -> training(U,V) heart(U,V) blood(U,V) userid(U,V) height(U,V) weight(U,V) password(U,V) sugarlevel(U,V) age(U,V)* username(U,V).
 This is a first-order Non-Horn problem without equality.
 This is a problem that has, if any, a finite domain model.
 There are no function symbols.
 Axiom clauses: 74 Conjecture clauses: 0
 Inferences: IORe=1 IOFc=1 
 Reductions: RObv=1 RTaut=1 RFSub=1 RBSub=1 
 Extras    : No Input Saturation, No Selection, No Splitting, Full Reduction,  Ratio: 5, FuncWeight: 1, VarWeight: 1
 Precedence: div > id > c^l > temp_succ > temp_shield > temp_zero > CardioMon > Pdelete > Pread > Pupdate > Pwrite > age > blood > country > customer > data > delete > display > gender > heart > height > password > public > read > sensitive > subject > sugarlevel > training > update > userid > username > weight > write
 Ordering  : KBO
Processed Problem:

Worked Off Clauses:

Usable Clauses:
2[0:Inp] || public(U,V) -> data(U,V)*.
1[0:Inp] || sensitive(U,V) -> data(U,V)*.
5[0:Inp] || display(U,V)* -> public(U,V).
4[0:Inp] || gender(U,V)* -> public(U,V).
3[0:Inp] || country(U,V)* -> public(U,V).
15[0:Inp] || username(U,V) -> sensitive(U,V)*.
14[0:Inp] || age(U,V)* -> sensitive(U,V).
13[0:Inp] || sugarlevel(U,V) -> sensitive(U,V)*.
12[0:Inp] || password(U,V)* -> sensitive(U,V).
11[0:Inp] || weight(U,V) -> sensitive(U,V)*.
10[0:Inp] || height(U,V)* -> sensitive(U,V).
9[0:Inp] || userid(U,V) -> sensitive(U,V)*.
8[0:Inp] || blood(U,V)* -> sensitive(U,V).
7[0:Inp] || heart(U,V)* -> sensitive(U,V).
6[0:Inp] || training(U,V) -> sensitive(U,V)*.
19[0:Inp] || delete(U,V,W) -> Pdelete(U,V,W)*.
18[0:Inp] || update(U,V,W) -> Pupdate(U,V,W)*.
17[0:Inp] || write(U,V,W) -> Pwrite(U,V,W)*.
16[0:Inp] || read(U,V,W) -> Pread(U,V,W)*.
20[0:Inp] || data(U,V)* -> public(U,V) sensitive(U,V).
21[0:Inp] || public(U,V) -> display(U,V) gender(U,V) country(U,V)*.
26[0:Inp] || country(U,V) customer(U,W) subject(U,V,W)* -> Pread(U,CardioMon,V)*.
25[0:Inp] || age(U,V) customer(U,W) subject(U,V,W)* -> Pread(U,CardioMon,V)*.
24[0:Inp] || gender(U,V) customer(U,W) subject(U,V,W)* -> Pread(U,CardioMon,V)*.
23[0:Inp] || display(U,V) customer(U,W) subject(U,V,W)* -> Pread(U,CardioMon,V)*.
22[0:Inp] || userid(U,V) customer(U,W) subject(U,V,W)* -> Pread(U,CardioMon,V)*.
73[0:Inp] || country(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
72[0:Inp] || country(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
71[0:Inp] || country(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
70[0:Inp] || training(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
69[0:Inp] || training(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
68[0:Inp] || training(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
67[0:Inp] || training(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
66[0:Inp] || heart(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
65[0:Inp] || heart(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
64[0:Inp] || heart(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
63[0:Inp] || heart(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
62[0:Inp] || blood(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
61[0:Inp] || blood(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
60[0:Inp] || blood(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
59[0:Inp] || blood(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
58[0:Inp] || sugarlevel(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
57[0:Inp] || sugarlevel(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
56[0:Inp] || sugarlevel(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
55[0:Inp] || sugarlevel(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
54[0:Inp] || weight(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
53[0:Inp] || weight(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
52[0:Inp] || weight(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
51[0:Inp] || weight(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
50[0:Inp] || height(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
49[0:Inp] || height(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
48[0:Inp] || height(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
47[0:Inp] || height(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
46[0:Inp] || age(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
45[0:Inp] || age(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
44[0:Inp] || age(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
43[0:Inp] || gender(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
42[0:Inp] || gender(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
41[0:Inp] || gender(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
40[0:Inp] || display(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
39[0:Inp] || display(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
38[0:Inp] || display(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
37[0:Inp] || userid(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
36[0:Inp] || userid(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
35[0:Inp] || userid(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
34[0:Inp] || password(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
33[0:Inp] || password(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
32[0:Inp] || password(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
31[0:Inp] || password(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
30[0:Inp] || username(U,V) customer(U,W) subject(U,V,W)* Pupdate(U,CardioMon,V)* -> .
29[0:Inp] || username(U,V) customer(U,W) subject(U,V,W)* Pdelete(U,CardioMon,V)* -> .
28[0:Inp] || username(U,V) customer(U,W) subject(U,V,W)* Pwrite(U,CardioMon,V)* -> .
27[0:Inp] || username(U,V) customer(U,W) subject(U,V,W)* Pread(U,CardioMon,V)* -> .
74[0:Inp] || sensitive(U,V) -> username(U,V) age(U,V)* sugarlevel(U,V) password(U,V) weight(U,V) height(U,V) userid(U,V) blood(U,V) heart(U,V) training(U,V).
Eventuality Clauses:

TSPASS 0.95 
SPASS beiseite: Satisfiable.
Problem: examples/tspass/wearable/byhand-May-2015/CardioMon_gen.fotl 
TSPASS derived 91 clauses, backtracked 0 clauses and kept 161 clauses.
Number of input clauses: 74
Number of eventualities: 0
Total number of generated clauses: 165
Number of forward-subsumed clauses: 0
Number of backward-subsumed clauses: 0
Total number of subsumed clauses: 0
Number of tautology clauses: 4
Number of clauses with different loop search markers: 0
Number of usable clauses left: 0
Number of worked-off clauses left: 161
Number of successful loop searches: 0
TSPASS allocated 582 KBytes.
TSPASS spent	0:00:00.01 (0.010998s) on the problem.
		0:00:00.00 (0.001s) for the input.
		0:00:00.00 (0.002999s) for the FLOTTER CNF translation.
		0:00:00.00 (0.001s) for inferences.
		0:00:00.00 (0s) for the backtracking.
		0:00:00.00 (0.003999s) for the reduction.

--------------------------TSPASS-STOP------------------------------
