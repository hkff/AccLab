/***************************
 *       Libs
 ****************************/
 LOAD "core.types"
 LOAD "core.macros"
 
/***************************
 *       Declarations
 ****************************/
// Actors
AGENT kim TYPES(DataSubject ) REQUIRED(sensor access ) PROVIDED()
AGENT cloudX TYPES(DataProcessor ) REQUIRED(storage ) PROVIDED(sensor access )
AGENT cloudY TYPES(DataProcessor ) REQUIRED(getData ) PROVIDED(storage access audit )
AGENT cloudZ TYPES(DataProcessor DataController ) REQUIRED(uploadData ) PROVIDED(getData access uploadActivity report marketing audit )
AGENT sandra TYPES(DataController ) REQUIRED(access uploadActivity ) PROVIDED()
AGENT hospital TYPES(DataController DataProcessor ) REQUIRED(research ) PROVIDED(report uploadActivity uploadData audit )
AGENT leslie TYPES(Auditor ) REQUIRED(report audit ) PROVIDED()
AGENT DPA
AGENT alice
AGENT cloudS

// Services
SERVICE sensor
SERVICE access
SERVICE storage
SERVICE accessgetData
SERVICE audituploadData
SERVICE getData
SERVICE uploadActivity
SERVICE report
SERVICE marketing
SERVICE auditaccess
SERVICE research
SERVICE uploadData
SERVICE auditreport
SERVICE audit
SERVICE read
SERVICE write
SERVICE sanction

/***************************
 *       Clauses
 ****************************/
/*** Kim's user preference ***/
CLAUSE kim_policy (
    FORALL file:data WHERE file.subject == kim
    PERMIT kim.read[cloudX](file)
    AND cloudX.delete[file]() BEFORE "3 Years"
    AUDITING DPA.audit[cloudS]()
    IF_VIOLATED_THEN MUST(DPA.sanction[cloudS]())
)

/*** CloudX's policy ***/
CLAUSE cloudX_policy (
    FORALL a:actor FORALL file:data WHERE file.subject == a
    DENY a.read[cloudX](file)
    AND cloudX.delete[file]() BEFORE "2 Years"
    AUDITING DPA.audit[cloudS]()
    IF_VIOLATED_THEN DPA.sanction[cloudS]()
)


/*** CloudY's policy ***/
CLAUSE cloudY_policy (
    FORALL a:actor FORALL file:data WHERE file.subject == a
    PERMIT a.read[cloudS](file)
    AUDITING DPA.audit[cloudS]()
    IF_VIOLATED_THEN DPA.sanction[cloudS]()
)


/*** CloudZ's policy ***/
CLAUSE cloudZ_policy (
    FORALL a:actor FORALL file:data WHERE file.subject == a
    PERMIT a.read[cloudS](file)
    AND PERMIT a.write[cloudS](file)
    AUDITING DPA.audit[cloudS]()
    IF_VIOLATED_THEN DPA.sanction[cloudS]()
)


/*** Sandra's user preference ***/
CLAUSE sandra_policy (
    FORALL file:data WHERE file.subject == alice
    EXISTS a:actor
    PERMIT alice.read[cloudS](d)
    AND PERMIT alice.write[cloudS](file)
    AUDITING DPA.audit[cloudS]()
    IF_VIOLATED_THEN MUST(DPA.sanction[cloudS]() AND cloudS.delete[file]())
)


/*** Hospital's policy ***/
CLAUSE hospital_policy (
    FORALL a:actor FORALL file:data WHERE file.subject == a
    PERMIT a.read[cloudS](file)
    AUDITING DPA.audit[cloudS]()
    IF_VIOLATED_THEN DPA.sanction[cloudS]()
)


