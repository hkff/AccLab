//======================= Compliance / Validity / Satisfiability =======================//


/*
 * Generic validate call
 * General call self.call("gvalidate", [c1, c2, "resolve", "verbose", "use_always", "acc_formula", "chk"])
 */
MACRO gvalidate(c1 c2 resolve verbose use_always acc_formula chk) (
"""
_c1 = self.clause(c1)
_c2 = self.clause(c2)
if _c1 is not None and _c2 is not None:
    validate(self, _c1, _c2, resolve=resolve, verbose=verbose, use_always=use_always, acc_formula=acc_formula, chk=chk)
"""
)



/** Checking validity (verbose mode) : using acc formula 1 */
MACRO validate(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 1, "'all'"]) # r v a acc c
"""
)

/** Checking validity (verbose mode) : using acc formula 1 */
MACRO vvalidate(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 1, "'all'"]) # r v a acc c
"""
)


/** Checking C1 & C2 : using only usage acc formula 1  */
MACRO validate_and(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 1, "'and'"]) # r v a acc c
"""
)

MACRO vvalidate_and(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 1, "'and'"]) # r v a acc c
"""
)


/** Checking C1 => C2 : using acc formula 1  */
MACRO validate_usage_imply(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 1, "'imply'"]) # r v a acc c
"""
)

MACRO vvalidate_imply(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 1, "'imply'"]) # r v a acc c
"""
)


/** Checking ~(C1 => C2) : using  acc formula 1  */
MACRO validate_usage_neg(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 1, "'neg'"]) # r v a acc c
"""
)

MACRO vvalidate_neg(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 1, "'neg'"]) # r v a acc c
"""
)




/** Checking validity : using only usage (formula 0)  */
MACRO validate_usage(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 0, "'all'"]) # r v a acc c
"""
)

/** Checking validity (verbose mode) : using only usage (formula 0) */
MACRO vvalidate_usage(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 0, "'all'"]) # r v a acc c
"""
)


/** Checking C1 & C2 : using only usage (formula 0)  */
MACRO validate_usage_and(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 0, "'and'"]) # r v a acc c
"""
)

MACRO vvalidate_usage_and(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 0, "'and'"]) # r v a acc c
"""
)


/** Checking C1 => C2 : using only usage (formula 0)  */
MACRO validate_usage_imply(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 0, "'imply'"]) # r v a acc c
"""
)

MACRO vvalidate_usage_imply(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 0, "'imply'"]) # r v a acc c
"""
)


/** Checking ~(C1 => C2) : using only usage (formula 0)  */
MACRO validate_usage_neg(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, False, False, 0, "'neg'"]) # r v a acc c
"""
)

MACRO vvalidate_usage_neg(c1 c2) (
"""
self.call("gvalidate", ["'" + c1 + "'", "'" + c2 + "'", False, True, False, 0, "'neg'"]) # r v a acc c
"""
)




/*
 * Conflicts detection
 */
MACRO resolve(c1 c2) (
"""
_c1 = self.clause(c1)
_c2 = self.clause(c2)

if _c1 is not None and _c2 is not None:
    solve_auth(self, p=_c1, u=_c2, resolve=False)
    solve_triggers(self, p=_c1, u=_c2, resolve=False)
"""
)

/*
 * Conflicts detection : apply corrections to current AAL program
 */
MACRO vresolve(c1 c2) (
"""
_c1 = self.clause(c1)
_c2 = self.clause(c2)
if _c1 is not None and _c2 is not None:
    solve_auth(self, p=c1, u=c2, resolve=True)
    solve_triggers(self, p=c1, u=c2, resolve=True)
"""
)

/*
 * Validate a single clause
 */
MACRO validate2(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, _c1.to_ltl()))
"""
)


/*
 * Checking satisfiability
 */
MACRO sat(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, _c1.to_ltl(), check=True))
"""
)

MACRO vsat(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, _c1.to_ltl(), check=True, verbose=True))
"""
)

MACRO sat_ue(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, "(always (" + _c1.usage.to_ltl() + "))", check=True))
"""
)

MACRO vsat_ue(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, "(always (" + _c1.usage.to_ltl() + "))", check=True, verbose=True))
"""
)

MACRO sat_ae(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, "(always (" + _c1.audit.to_ltl() + "))", check=True))
"""
)

MACRO vsat_ae(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, "(always (" + _c1.audit.to_ltl() + "))", check=True, verbose=True))
"""
)


MACRO sat_re(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, "(always (" + _c1.rectification.to_ltl() + "))", check=True))
"""
)

MACRO vsat_re(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, "(always (" + _c1.rectification.to_ltl() + "))", check=True, verbose=True))
"""
)


/*
 * AAL Check
 */
MACRO check_aal() (
"""
print(Color(check_aal(self, verbose=True)))
"""
)

//======================= FOTL =======================//

/*
 * fotl check
 */
MACRO fotl_check (
"""
print(AALtoFOTL(self.aalprog))
"""
)


/*
 * Translate clause c to FOTL
 */
MACRO fotl(c) (
"""
cl = self.clause(c)
if cl is not None:
    print(cl.to_ltl())
"""
)


/*
 * Evaluate an FOTL expression
 */
MACRO do(a) (
"""
self.apply_check(code= AALtoFOTL(l) + " & " + a , verbose=False, show=True)["print"]
"""
)

//======================= MISC =======================//

/*
 * Show all loaded libs
 */
MACRO show_libs (
"""
print("loaded libs....")
for x in self.libs:
    print(x.file)
print("\n")
"""
)


/*
 * Print a clause
 */
MACRO show_clause(c) (
"""
cl = self.clause(c)
if cl is not None:
    print(cl)
"""
)


/*
 * Get natural language translation of a clause
 */
MACRO to_natural(c) (
"""
cl = self.clause(c)
if cl is not None:
    print(cl.to_natural())
"""
)


/*
 * Disable agents declarations
 */
MACRO skip_defs() (
"""
def exitAgentDec(ctx):
    pass
self.exitAgentDec = exitAgentDec
"""
)

