//======================= Compliance / Validity / Satisfiability =======================//


LOAD "core.validate"
LOAD "core.resolve"
LOAD "core.sat"

/*
 * Validate a single clause
 */
MACRO validate2(c1) (
"""
_c1 = self.clause(c1)
if _c1 is not None:
    print(validate2(self, _c1.to_ltl()))
"""
)


/*
 * AAL Check
 */
MACRO check_aal() (
"""
print(Color(check_aal(self, verbose=True)))
"""
)

//======================= FOTL =======================//

/*
 * fotl check
 */
MACRO fotl_check (
"""
print(AALtoFOTL(self.aalprog))
"""
)


/*
 * Translate clause c to FOTL
 */
MACRO clause_fotl(c) (
"""
cl = self.clause(c)
if cl is not None:
    print(cl.to_ltl())
"""
)


/*
 * Evaluate an FOTL expression
 */
MACRO fotl(a) (
"""
self.apply_check(code=a , verbose=False, show=True)["print"]
"""
)

//======================= MISC =======================//

/*
 * Show all loaded libs
 */
MACRO show_libs (
"""
print("loaded libs....")
for x in self.libs:
    print(x.file)
print("\n")
"""
)


/*
 * Print a clause
 */
MACRO show_clause(c) (
"""
cl = self.clause(c)
if cl is not None:
    print(cl)
"""
)

/*
 * Print the fotl context
 */
MACRO show_context() (
"""
print(build_env(self.aalprog))
"""
)

/*
 * Get natural language translation of a clause
 */
MACRO to_natural(c) (
"""
cl = self.clause(c)
if cl is not None:
    print(cl.to_natural())
"""
)


/*
 * Disable agents declarations
 */
MACRO skip_defs() (
"""
def exitAgentDec(ctx):
    pass
self.exitAgentDec = exitAgentDec
"""
)

/*
 * Web view
 */
MACRO popup(res) (
"""
### Web view ###
## NOTE : not a place for this
###
opts = "'closeButton': true, 'preventDuplicates': true, 'tapToDismiss': true, 'timeOut': 5000 "
if res == "true":
    web = "<script> toastr.success('Check passed !', 'Result', {" + opts + " }); </script>"
else:
    web = "<script> toastr.error('Check failed !', 'Result', {" + opts + " }); </script>"
print(web)
"""
)

/*
 * Translate to DjFodtlmon
 */
MACRO to_djfodtlmon() (
"""
AALtoDJFODTLMON(self, MappingSpec())
"""
)

/*
 * Translate an AAL clause to FODTL
 */
MACRO to_fodtl(c1) (
"""
cl = self.clause(c1)
if cl is not None:
    print(aal_clause_to_fodtl(cl))
"""
)
