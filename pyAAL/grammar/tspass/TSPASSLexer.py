# Generated from java-escape by ANTLR 4.4
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2$")
        buf.write("\u00db\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\5\35\u00a6\n")
        buf.write("\35\3\35\3\35\3\35\7\35\u00ab\n\35\f\35\16\35\u00ae\13")
        buf.write("\35\3\36\6\36\u00b1\n\36\r\36\16\36\u00b2\3\37\5\37\u00b6")
        buf.write("\n\37\3\37\3\37\3\37\3\37\3 \6 \u00bd\n \r \16 \u00be")
        buf.write("\3 \3 \3!\6!\u00c4\n!\r!\16!\u00c5\3\"\3\"\7\"\u00ca\n")
        buf.write("\"\f\"\16\"\u00cd\13\"\3\"\3\"\3#\3#\7#\u00d3\n#\f#\16")
        buf.write("#\u00d6\13#\3#\3#\3#\3#\4\u00cb\u00d4\2$\3\3\5\4\7\5\t")
        buf.write("\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$\3\2\4\4\2C\\c|\5\2\13\f\17")
        buf.write("\17\"\"\u00e3\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t")
        buf.write("\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3")
        buf.write("\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2")
        buf.write("\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2")
        buf.write("\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2")
        buf.write("\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\3G\3\2\2")
        buf.write("\2\5I\3\2\2\2\7R\3\2\2\2\tT\3\2\2\2\13V\3\2\2\2\rX\3\2")
        buf.write("\2\2\17\\\3\2\2\2\21^\3\2\2\2\23`\3\2\2\2\25g\3\2\2\2")
        buf.write("\27m\3\2\2\2\31o\3\2\2\2\33u\3\2\2\2\35w\3\2\2\2\37|\3")
        buf.write("\2\2\2!\u0081\3\2\2\2#\u0084\3\2\2\2%\u0087\3\2\2\2\'")
        buf.write("\u0089\3\2\2\2)\u008b\3\2\2\2+\u008f\3\2\2\2-\u0096\3")
        buf.write("\2\2\2/\u009a\3\2\2\2\61\u009c\3\2\2\2\63\u009e\3\2\2")
        buf.write("\2\65\u00a0\3\2\2\2\67\u00a2\3\2\2\29\u00a5\3\2\2\2;\u00b0")
        buf.write("\3\2\2\2=\u00b5\3\2\2\2?\u00bc\3\2\2\2A\u00c3\3\2\2\2")
        buf.write("C\u00c7\3\2\2\2E\u00d0\3\2\2\2GH\7_\2\2H\4\3\2\2\2IJ\7")
        buf.write("u\2\2JK\7q\2\2KL\7o\2\2LM\7g\2\2MN\7v\2\2NO\7k\2\2OP\7")
        buf.write("o\2\2PQ\7g\2\2Q\6\3\2\2\2RS\7(\2\2S\b\3\2\2\2TU\7.\2\2")
        buf.write("U\n\3\2\2\2VW\7]\2\2W\f\3\2\2\2XY\7p\2\2YZ\7q\2\2Z[\7")
        buf.write("v\2\2[\16\3\2\2\2\\]\7*\2\2]\20\3\2\2\2^_\7<\2\2_\22\3")
        buf.write("\2\2\2`a\7w\2\2ab\7p\2\2bc\7n\2\2cd\7g\2\2de\7u\2\2ef")
        buf.write("\7u\2\2f\24\3\2\2\2gh\7h\2\2hi\7c\2\2ij\7n\2\2jk\7u\2")
        buf.write("\2kl\7g\2\2l\26\3\2\2\2mn\7A\2\2n\30\3\2\2\2op\7w\2\2")
        buf.write("pq\7p\2\2qr\7v\2\2rs\7k\2\2st\7n\2\2t\32\3\2\2\2uv\7{")
        buf.write("\2\2v\34\3\2\2\2wx\7p\2\2xy\7g\2\2yz\7z\2\2z{\7v\2\2{")
        buf.write("\36\3\2\2\2|}\7v\2\2}~\7t\2\2~\177\7w\2\2\177\u0080\7")
        buf.write("g\2\2\u0080 \3\2\2\2\u0081\u0082\7/\2\2\u0082\u0083\7")
        buf.write("@\2\2\u0083\"\3\2\2\2\u0084\u0085\7?\2\2\u0085\u0086\7")
        buf.write("@\2\2\u0086$\3\2\2\2\u0087\u0088\7+\2\2\u0088&\3\2\2\2")
        buf.write("\u0089\u008a\7\60\2\2\u008a(\3\2\2\2\u008b\u008c\7>\2")
        buf.write("\2\u008c\u008d\7/\2\2\u008d\u008e\7@\2\2\u008e*\3\2\2")
        buf.write("\2\u008f\u0090\7c\2\2\u0090\u0091\7n\2\2\u0091\u0092\7")
        buf.write("y\2\2\u0092\u0093\7c\2\2\u0093\u0094\7{\2\2\u0094\u0095")
        buf.write("\7u\2\2\u0095,\3\2\2\2\u0096\u0097\7>\2\2\u0097\u0098")
        buf.write("\7?\2\2\u0098\u0099\7@\2\2\u0099.\3\2\2\2\u009a\u009b")
        buf.write("\7?\2\2\u009b\60\3\2\2\2\u009c\u009d\7z\2\2\u009d\62\3")
        buf.write("\2\2\2\u009e\u009f\7\u0080\2\2\u009f\64\3\2\2\2\u00a0")
        buf.write("\u00a1\7~\2\2\u00a1\66\3\2\2\2\u00a2\u00a3\7#\2\2\u00a3")
        buf.write("8\3\2\2\2\u00a4\u00a6\t\2\2\2\u00a5\u00a4\3\2\2\2\u00a6")
        buf.write("\u00ac\3\2\2\2\u00a7\u00ab\t\2\2\2\u00a8\u00ab\5;\36\2")
        buf.write("\u00a9\u00ab\7a\2\2\u00aa\u00a7\3\2\2\2\u00aa\u00a8\3")
        buf.write("\2\2\2\u00aa\u00a9\3\2\2\2\u00ab\u00ae\3\2\2\2\u00ac\u00aa")
        buf.write("\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad:\3\2\2\2\u00ae\u00ac")
        buf.write("\3\2\2\2\u00af\u00b1\4\62;\2\u00b0\u00af\3\2\2\2\u00b1")
        buf.write("\u00b2\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2")
        buf.write("\u00b3<\3\2\2\2\u00b4\u00b6\7\17\2\2\u00b5\u00b4\3\2\2")
        buf.write("\2\u00b5\u00b6\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b8")
        buf.write("\7\f\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00ba\b\37\2\2\u00ba")
        buf.write(">\3\2\2\2\u00bb\u00bd\t\3\2\2\u00bc\u00bb\3\2\2\2\u00bd")
        buf.write("\u00be\3\2\2\2\u00be\u00bc\3\2\2\2\u00be\u00bf\3\2\2\2")
        buf.write("\u00bf\u00c0\3\2\2\2\u00c0\u00c1\b \3\2\u00c1@\3\2\2\2")
        buf.write("\u00c2\u00c4\7\"\2\2\u00c3\u00c2\3\2\2\2\u00c4\u00c5\3")
        buf.write("\2\2\2\u00c5\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6B")
        buf.write("\3\2\2\2\u00c7\u00cb\7$\2\2\u00c8\u00ca\13\2\2\2\u00c9")
        buf.write("\u00c8\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cb\u00c9\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00cb\3")
        buf.write("\2\2\2\u00ce\u00cf\7$\2\2\u00cfD\3\2\2\2\u00d0\u00d4\7")
        buf.write("\'\2\2\u00d1\u00d3\13\2\2\2\u00d2\u00d1\3\2\2\2\u00d3")
        buf.write("\u00d6\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d4\u00d2\3\2\2\2")
        buf.write("\u00d5\u00d7\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7\u00d8\7")
        buf.write("\f\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\b#\2\2\u00daF\3")
        buf.write("\2\2\2\f\2\u00a5\u00aa\u00ac\u00b2\u00b5\u00be\u00c5\u00cb")
        buf.write("\u00d4\4\2\3\2\b\2\2")
        return buf.getvalue()
		

class TSPASSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__26 = 1
    T__25 = 2
    T__24 = 3
    T__23 = 4
    T__22 = 5
    T__21 = 6
    T__20 = 7
    T__19 = 8
    T__18 = 9
    T__17 = 10
    T__16 = 11
    T__15 = 12
    T__14 = 13
    T__13 = 14
    T__12 = 15
    T__11 = 16
    T__10 = 17
    T__9 = 18
    T__8 = 19
    T__7 = 20
    T__6 = 21
    T__5 = 22
    T__4 = 23
    T__3 = 24
    T__2 = 25
    T__1 = 26
    T__0 = 27
    ID = 28
    INT = 29
    NEWLINE = 30
    WS = 31
    BLANK = 32
    STRING = 33
    COMMENT = 34


    modeNames = [ "DEFAULT_MODE" ]

    tokenNames = [ "<INVALID>",
            "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", 
            "'\\u0005'", "'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", 
            "'\\u000B'", "'\f'", "'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", 
            "'\\u0011'", "'\\u0012'", "'\\u0013'", "'\\u0014'", "'\\u0015'", 
            "'\\u0016'", "'\\u0017'", "'\\u0018'", "'\\u0019'", "'\\u001A'", 
            "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", "'\\u001F'", 
            "' '", "'!'", "'\"'" ]

    ruleNames = [ "T__26", "T__25", "T__24", "T__23", "T__22", "T__21", 
                  "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", 
                  "T__14", "T__13", "T__12", "T__11", "T__10", "T__9", "T__8", 
                  "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", 
                  "T__0", "ID", "INT", "NEWLINE", "WS", "BLANK", "STRING", 
                  "COMMENT" ]

    grammarFileName = "TSPASS.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.4")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


