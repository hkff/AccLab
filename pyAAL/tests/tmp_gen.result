
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For initial clauses:
32[0:Inp] ||  -> buildenv*.    -> 32[0:Inp] ||  -> buildenv(temp_zero)*.
79[0:Inp] ||  -> Customer(CTS)*.    -> 79[0:Inp] ||  -> Customer(temp_zero,CTS)*.
80[0:Inp] ||  -> WDevice(CTS)*.    -> 80[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
81[0:Inp] ||  -> WCOAdmin(CTS)*.    -> 81[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
82[0:Inp] ||  -> WCOemployee(CTS)*.    -> 82[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
83[0:Inp] ||  -> DataProcessor(CTS)*.    -> 83[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
84[0:Inp] ||  -> DataController(CTS)*.    -> 84[0:Inp] ||  -> DataController(temp_zero,CTS)*.
85[0:Inp] ||  -> DataSubject(CTS)*.    -> 85[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
86[0:Inp] ||  -> country(CTS)*.    -> 86[0:Inp] ||  -> country(temp_zero,CTS)*.
87[0:Inp] ||  -> wellbeing(CTS)*.    -> 87[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
88[0:Inp] ||  -> activity(CTS)*.    -> 88[0:Inp] ||  -> activity(temp_zero,CTS)*.
89[0:Inp] ||  -> heartbeat(CTS)*.    -> 89[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
90[0:Inp] ||  -> blood(CTS)*.    -> 90[0:Inp] ||  -> blood(temp_zero,CTS)*.
91[0:Inp] ||  -> sugarLevel(CTS)*.    -> 91[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
92[0:Inp] ||  -> weight(CTS)*.    -> 92[0:Inp] ||  -> weight(temp_zero,CTS)*.
93[0:Inp] ||  -> height(CTS)*.    -> 93[0:Inp] ||  -> height(temp_zero,CTS)*.
94[0:Inp] ||  -> age(CTS)*.    -> 94[0:Inp] ||  -> age(temp_zero,CTS)*.
95[0:Inp] ||  -> gender(CTS)*.    -> 95[0:Inp] ||  -> gender(temp_zero,CTS)*.
96[0:Inp] ||  -> displayName(CTS)*.    -> 96[0:Inp] ||  -> displayName(temp_zero,CTS)*.
97[0:Inp] ||  -> userId(CTS)*.    -> 97[0:Inp] ||  -> userId(temp_zero,CTS)*.
98[0:Inp] ||  -> password(CTS)*.    -> 98[0:Inp] ||  -> password(temp_zero,CTS)*.
99[0:Inp] ||  -> username(CTS)*.    -> 99[0:Inp] ||  -> username(temp_zero,CTS)*.
100[0:Inp] ||  -> public(CTS)*.    -> 100[0:Inp] ||  -> public(temp_zero,CTS)*.
101[0:Inp] ||  -> sensitive(CTS)*.    -> 101[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
102[0:Inp] ||  -> EndUser(CTS)*.    -> 102[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
103[0:Inp] ||  -> CloudCustomer(CTS)*.    -> 103[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
104[0:Inp] ||  -> CloudProvider(CTS)*.    -> 104[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
105[0:Inp] ||  -> Auditor(CTS)*.    -> 105[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
106[0:Inp] ||  -> DwDataController(CTS)*.    -> 106[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
110[0:Inp] ||  -> Actor(CTS)*.    -> 110[0:Inp] ||  -> Actor(temp_zero,CTS)*.
111[0:Inp] ||  -> data(CTS)*.    -> 111[0:Inp] ||  -> data(temp_zero,CTS)*.
1[0:Inp] ||  -> SkP11(U) username(U)*.    -> 1[0:Inp] ||  -> SkP11(temp_zero,U) username(temp_zero,U)*.
25[0:Inp] ||  -> SkC0 EQUAL(subject(skc2),customer)*.    -> 25[0:Inp] ||  -> SkC0(temp_zero) EQUAL(temp_zero,subject(skc2),customer)*.
27[0:Inp] || SkP0(skc2) -> SkC0 country(skc2)*.    -> 27[0:Inp] || SkP0(temp_zero,skc2) -> SkC0(temp_zero) country(temp_zero,skc2)*.
4[0:Inp] || SkP11(U) -> SkP10(U) password(U)*.    -> 4[0:Inp] || SkP11(temp_zero,U) -> SkP10(temp_zero,U) password(temp_zero,U)*.
6[0:Inp] || SkP10(U) -> SkP9(U) userId(U)*.    -> 6[0:Inp] || SkP10(temp_zero,U) -> SkP9(temp_zero,U) userId(temp_zero,U)*.
8[0:Inp] || SkP9(U) -> SkP8(U) displayName(U)*.    -> 8[0:Inp] || SkP9(temp_zero,U) -> SkP8(temp_zero,U) displayName(temp_zero,U)*.
10[0:Inp] || SkP8(U) -> SkP7(U) gender(U)*.    -> 10[0:Inp] || SkP8(temp_zero,U) -> SkP7(temp_zero,U) gender(temp_zero,U)*.
12[0:Inp] || SkP7(U) -> SkP6(U) age(U)*.    -> 12[0:Inp] || SkP7(temp_zero,U) -> SkP6(temp_zero,U) age(temp_zero,U)*.
14[0:Inp] || SkP6(U) -> SkP5(U) gender(U)*.    -> 14[0:Inp] || SkP6(temp_zero,U) -> SkP5(temp_zero,U) gender(temp_zero,U)*.
16[0:Inp] || SkP5(U) -> SkP4(U) height(U)*.    -> 16[0:Inp] || SkP5(temp_zero,U) -> SkP4(temp_zero,U) height(temp_zero,U)*.
18[0:Inp] || SkP4(U) -> SkP3(U) weight(U)*.    -> 18[0:Inp] || SkP4(temp_zero,U) -> SkP3(temp_zero,U) weight(temp_zero,U)*.
20[0:Inp] || SkP3(U) -> SkP2(U) sugarLevel(U)*.    -> 20[0:Inp] || SkP3(temp_zero,U) -> SkP2(temp_zero,U) sugarLevel(temp_zero,U)*.
22[0:Inp] || SkP2(U) -> SkP1(U) heartbeat(U)*.    -> 22[0:Inp] || SkP2(temp_zero,U) -> SkP1(temp_zero,U) heartbeat(temp_zero,U)*.
24[0:Inp] || SkP1(U) -> SkP0(U) activity(U)*.    -> 24[0:Inp] || SkP1(temp_zero,U) -> SkP0(temp_zero,U) activity(temp_zero,U)*.
30[0:Inp] || SkC0 -> heartbeat(skc0) sugarLevel(skc0) blood(skc0)*.    -> 30[0:Inp] || SkC0(temp_zero) -> heartbeat(temp_zero,skc0) sugarLevel(temp_zero,skc0) blood(temp_zero,skc0)*.
33[0:Inp] || requestDataCompliance(U,V,W) -> PrequestDataCompliance(U,V,W)*.    -> 33[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
34[0:Inp] || viewActiveUsers(U,V,W) -> PviewActiveUsers(U,V,W)*.    -> 34[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
35[0:Inp] || updateThresholds(U,V,W) -> PupdateThresholds(U,V,W)*.    -> 35[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
36[0:Inp] || manageBusinessFormula(U,V,W) -> PmanageBusinessFormula(U,V,W)*.    -> 36[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
37[0:Inp] || createBusinessProfile(U,V,W) -> PcreateBusinessProfile(U,V,W)*.    -> 37[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
38[0:Inp] || receiveBreachNotif(U,V,W) -> PreceiveBreachNotif(U,V,W)*.    -> 38[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
39[0:Inp] || receivePVA(U,V,W) -> PreceivePVA(U,V,W)*.    -> 39[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
40[0:Inp] || receiveAlerts(U,V,W) -> PreceiveAlerts(U,V,W)*.    -> 40[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
41[0:Inp] || requestDataPath(U,V,W) -> PrequestDataPath(U,V,W)*.    -> 41[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
42[0:Inp] || requestStat(U,V,W) -> PrequestStat(U,V,W)*.    -> 42[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
43[0:Inp] || getWellbeingScore(U,V,W) -> PgetWellbeingScore(U,V,W)*.    -> 43[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
44[0:Inp] || getWellbeingTraining(U,V,W) -> PgetWellbeingTraining(U,V,W)*.    -> 44[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
45[0:Inp] || updateWellbeing(U,V,W) -> PupdateWellbeing(U,V,W)*.    -> 45[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
46[0:Inp] || requestRTI(U,V,W) -> PrequestRTI(U,V,W)*.    -> 46[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
47[0:Inp] || submitRTI(U,V,W) -> PsubmitRTI(U,V,W)*.    -> 47[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
48[0:Inp] || delete(U,V,W) -> Pdelete(U,V,W)*.    -> 48[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
49[0:Inp] || update(U,V,W) -> Pupdate(U,V,W)*.    -> 49[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
50[0:Inp] || edit(U,V,W) -> Pedit(U,V,W)*.    -> 50[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
51[0:Inp] || add(U,V,W) -> Padd(U,V,W)*.    -> 51[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
52[0:Inp] || login(U,V,W) -> Plogin(U,V,W)*.    -> 52[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
53[0:Inp] || createCustomerProfile(U,V,W) -> PcreateCustomerProfile(U,V,W)*.    -> 53[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
55[0:Inp] || receiveTVA(U,V,W) -> PreceiveTVA(U,V,W)*.    -> 55[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
76[0:Inp] || audit(U,V,W) -> Paudit(U,V,W)*.    -> 76[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
77[0:Inp] || write(U,V,W) -> Pwrite(U,V,W)*.    -> 77[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
78[0:Inp] || read(U,V,W) -> Pread(U,V,W)*.    -> 78[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
28[0:Inp] || PsubmitRTI(customer,cardioMon,skc0)* SkC0 -> PsubmitRTI(skc1,cardioMon,skc0).    -> 28[0:Inp] || PsubmitRTI(temp_zero,customer,cardioMon,skc0)* SkC0(temp_zero) -> PsubmitRTI(temp_zero,skc1,cardioMon,skc0).
29[0:Inp] || PsubmitRTI(customer,cardioMon,skc0)* EQUAL(skc1,customer) SkC0 -> .    -> 29[0:Inp] || PsubmitRTI(temp_zero,customer,cardioMon,skc0)* EQUAL(temp_zero,skc1,customer) SkC0(temp_zero) -> .
31[0:Inp] || userId(U) EQUAL(subject(U),customer)* -> Pread(customer,cardioMon,U).    -> 31[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),customer)* -> Pread(temp_zero,customer,cardioMon,U).
2[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) -> SkP11(U).    -> 2[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) -> SkP11(temp_zero,U).
26[0:Inp] || Pdelete(customer,cardioMon,skc2)* Pupdate(customer,cardioMon,skc2) Pread(customer,cardioMon,skc2) SkP0(skc2) -> SkC0.    -> 26[0:Inp] || Pdelete(temp_zero,customer,cardioMon,skc2)* Pupdate(temp_zero,customer,cardioMon,skc2) Pread(temp_zero,customer,cardioMon,skc2) SkP0(temp_zero,skc2) -> SkC0(temp_zero).
3[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP11(U) -> SkP10(U).    -> 3[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP11(temp_zero,U) -> SkP10(temp_zero,U).
5[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP10(U) -> SkP9(U).    -> 5[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP10(temp_zero,U) -> SkP9(temp_zero,U).
7[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP9(U) -> SkP8(U).    -> 7[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP9(temp_zero,U) -> SkP8(temp_zero,U).
9[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP8(U) -> SkP7(U).    -> 9[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP8(temp_zero,U) -> SkP7(temp_zero,U).
11[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP7(U) -> SkP6(U).    -> 11[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP7(temp_zero,U) -> SkP6(temp_zero,U).
13[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP6(U) -> SkP5(U).    -> 13[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP6(temp_zero,U) -> SkP5(temp_zero,U).
15[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP5(U) -> SkP4(U).    -> 15[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP5(temp_zero,U) -> SkP4(temp_zero,U).
17[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP4(U) -> SkP3(U).    -> 17[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP4(temp_zero,U) -> SkP3(temp_zero,U).
19[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP3(U) -> SkP2(U).    -> 19[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP3(temp_zero,U) -> SkP2(temp_zero,U).
21[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP2(U) -> SkP1(U).    -> 21[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP2(temp_zero,U) -> SkP1(temp_zero,U).
23[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP1(U) -> SkP0(U).    -> 23[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP1(temp_zero,U) -> SkP0(temp_zero,U).
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For universal clauses:
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
Non-Skolem constants contained in the problem: cardioMon, customer, CTS, temp_zero
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
Weight of the temporal successor function set to 1.
Step clauses:
--------------------------TSPASS-START-----------------------------
Input Problem:
1[0:Inp] ||  -> buildenv(temp_zero)*.
2[0:Inp] ||  -> data(temp_zero,CTS)*.
3[0:Inp] ||  -> Actor(temp_zero,CTS)*.
4[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
5[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
6[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
7[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
8[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
9[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
10[0:Inp] ||  -> public(temp_zero,CTS)*.
11[0:Inp] ||  -> username(temp_zero,CTS)*.
12[0:Inp] ||  -> password(temp_zero,CTS)*.
13[0:Inp] ||  -> userId(temp_zero,CTS)*.
14[0:Inp] ||  -> displayName(temp_zero,CTS)*.
15[0:Inp] ||  -> gender(temp_zero,CTS)*.
16[0:Inp] ||  -> age(temp_zero,CTS)*.
17[0:Inp] ||  -> height(temp_zero,CTS)*.
18[0:Inp] ||  -> weight(temp_zero,CTS)*.
19[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
20[0:Inp] ||  -> blood(temp_zero,CTS)*.
21[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
22[0:Inp] ||  -> activity(temp_zero,CTS)*.
23[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
24[0:Inp] ||  -> country(temp_zero,CTS)*.
25[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
26[0:Inp] ||  -> DataController(temp_zero,CTS)*.
27[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
28[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
29[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
30[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
31[0:Inp] ||  -> Customer(temp_zero,CTS)*.
32[0:Inp] ||  -> SkP11(temp_zero,U) username(temp_zero,U)*.
33[0:Inp] ||  -> SkC0(temp_zero) EQUAL(temp_zero,subject(skc2),customer)*.
34[0:Inp] || SkP0(temp_zero,skc2) -> SkC0(temp_zero) country(temp_zero,skc2)*.
35[0:Inp] || SkP1(temp_zero,U) -> SkP0(temp_zero,U) activity(temp_zero,U)*.
36[0:Inp] || SkP2(temp_zero,U) -> SkP1(temp_zero,U) heartbeat(temp_zero,U)*.
37[0:Inp] || SkP3(temp_zero,U) -> SkP2(temp_zero,U) sugarLevel(temp_zero,U)*.
38[0:Inp] || SkP4(temp_zero,U) -> SkP3(temp_zero,U) weight(temp_zero,U)*.
39[0:Inp] || SkP5(temp_zero,U) -> SkP4(temp_zero,U) height(temp_zero,U)*.
40[0:Inp] || SkP6(temp_zero,U) -> SkP5(temp_zero,U) gender(temp_zero,U)*.
41[0:Inp] || SkP7(temp_zero,U) -> SkP6(temp_zero,U) age(temp_zero,U)*.
42[0:Inp] || SkP8(temp_zero,U) -> SkP7(temp_zero,U) gender(temp_zero,U)*.
43[0:Inp] || SkP9(temp_zero,U) -> SkP8(temp_zero,U) displayName(temp_zero,U)*.
44[0:Inp] || SkP10(temp_zero,U) -> SkP9(temp_zero,U) userId(temp_zero,U)*.
45[0:Inp] || SkP11(temp_zero,U) -> SkP10(temp_zero,U) password(temp_zero,U)*.
46[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
47[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
48[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
49[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
50[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
51[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
52[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
53[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
54[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
55[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
56[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
57[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
58[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
59[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
60[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
61[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
62[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
63[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
64[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
65[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
66[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
67[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
68[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
69[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
70[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
71[0:Inp] || SkC0(temp_zero) -> heartbeat(temp_zero,skc0) sugarLevel(temp_zero,skc0) blood(temp_zero,skc0)*.
72[0:Inp] || PsubmitRTI(temp_zero,customer,cardioMon,skc0)* EQUAL(temp_zero,skc1,customer) SkC0(temp_zero) -> .
73[0:Inp] || PsubmitRTI(temp_zero,customer,cardioMon,skc0)* SkC0(temp_zero) -> PsubmitRTI(temp_zero,skc1,cardioMon,skc0).
74[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),customer)* -> Pread(temp_zero,customer,cardioMon,U).
75[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) -> SkP11(temp_zero,U).
76[0:Inp] || Pdelete(temp_zero,customer,cardioMon,skc2)* Pupdate(temp_zero,customer,cardioMon,skc2) Pread(temp_zero,customer,cardioMon,skc2) SkP0(temp_zero,skc2) -> SkC0(temp_zero).
77[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP11(temp_zero,U) -> SkP10(temp_zero,U).
78[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP10(temp_zero,U) -> SkP9(temp_zero,U).
79[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP9(temp_zero,U) -> SkP8(temp_zero,U).
80[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP8(temp_zero,U) -> SkP7(temp_zero,U).
81[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP7(temp_zero,U) -> SkP6(temp_zero,U).
82[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP6(temp_zero,U) -> SkP5(temp_zero,U).
83[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP5(temp_zero,U) -> SkP4(temp_zero,U).
84[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP4(temp_zero,U) -> SkP3(temp_zero,U).
85[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP3(temp_zero,U) -> SkP2(temp_zero,U).
86[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP2(temp_zero,U) -> SkP1(temp_zero,U).
87[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP1(temp_zero,U) -> SkP0(temp_zero,U).
 This is a first-order Non-Horn problem without equality.
 The following monadic predicates have finite extensions: buildenv.
 Axiom clauses: 87 Conjecture clauses: 0
 Inferences: IORe=1 IOFc=1 
 Reductions: RObv=1 RTaut=1 RFSub=1 RBSub=1 
 Extras    : No Input Saturation, No Selection, No Splitting, Full Reduction,  Ratio: 5, FuncWeight: 1, VarWeight: 1
 Precedence: div > id > c^l > temp_succ > temp_shield > temp_zero > CTS > cardioMon > customer > subject > Actor > Auditor > CloudCustomer > CloudProvider > Customer > DataController > DataProcessor > DataSubject > DwDataController > EQUAL > EndUser > Padd > Paudit > PcreateBusinessProfile > PcreateCustomerProfile > Pdelete > Pedit > PgetWellbeingScore > PgetWellbeingTraining > Plogin > PmanageBusinessFormula > Pread > PreceiveAlerts > PreceiveBreachNotif > PreceivePVA > PreceiveTVA > PrequestDataCompliance > PrequestDataPath > PrequestRTI > PrequestStat > PsubmitRTI > Pupdate > PupdateThresholds > PupdateWellbeing > PviewActiveUsers > Pwrite > WCOAdmin > WCOemployee > WDevice > activity > add > age > audit > blood > buildenv > country > createBusinessProfile > createCustomerProfile > data > delete > displayName > edit > gender > getWellbeingScore > getWellbeingTraining > heartbeat > height > login > manageBusinessFormula > password > public > read > receiveAlerts > receiveBreachNotif > receivePVA > receiveTVA > requestDataCompliance > requestDataPath > requestRTI > requestStat > sensitive > submitRTI > sugarLevel > update > updateThresholds > updateWellbeing > userId > username > viewActiveUsers > weight > wellbeing > write > SkC0 > SkP0 > SkP1 > SkP2 > SkP3 > SkP4 > SkP5 > SkP6 > SkP7 > SkP8 > SkP9 > SkP10 > SkP11 > skc0 > skc1 > skc2
 Ordering  : KBO
Processed Problem:

Worked Off Clauses:

Usable Clauses:
1[0:Inp] ||  -> buildenv(temp_zero)*.
31[0:Inp] ||  -> Customer(temp_zero,CTS)*.
30[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
29[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
28[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
27[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
26[0:Inp] ||  -> DataController(temp_zero,CTS)*.
25[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
23[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
10[0:Inp] ||  -> public(temp_zero,CTS)*.
9[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
8[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
7[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
6[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
5[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
4[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
3[0:Inp] ||  -> Actor(temp_zero,CTS)*.
2[0:Inp] ||  -> data(temp_zero,CTS)*.
24[0:Inp] ||  -> country(temp_zero,CTS)*.
22[0:Inp] ||  -> activity(temp_zero,CTS)*.
20[0:Inp] ||  -> blood(temp_zero,CTS)*.
18[0:Inp] ||  -> weight(temp_zero,CTS)*.
17[0:Inp] ||  -> height(temp_zero,CTS)*.
16[0:Inp] ||  -> age(temp_zero,CTS)*.
14[0:Inp] ||  -> displayName(temp_zero,CTS)*.
12[0:Inp] ||  -> password(temp_zero,CTS)*.
11[0:Inp] ||  -> username(temp_zero,CTS)*.
21[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
19[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
15[0:Inp] ||  -> gender(temp_zero,CTS)*.
13[0:Inp] ||  -> userId(temp_zero,CTS)*.
32[0:Inp] ||  -> username(temp_zero,U)* SkP11(temp_zero,U).
33[0:Inp] ||  -> SkC0(temp_zero) EQUAL(temp_zero,subject(skc2),customer)*.
34[0:Inp] || SkP0(temp_zero,skc2) -> SkC0(temp_zero) country(temp_zero,skc2)*.
45[0:Inp] || SkP11(temp_zero,U) -> password(temp_zero,U)* SkP10(temp_zero,U).
43[0:Inp] || SkP9(temp_zero,U) -> displayName(temp_zero,U)* SkP8(temp_zero,U).
41[0:Inp] || SkP7(temp_zero,U) -> age(temp_zero,U)* SkP6(temp_zero,U).
39[0:Inp] || SkP5(temp_zero,U) -> height(temp_zero,U)* SkP4(temp_zero,U).
38[0:Inp] || SkP4(temp_zero,U) -> weight(temp_zero,U)* SkP3(temp_zero,U).
35[0:Inp] || SkP1(temp_zero,U) -> activity(temp_zero,U)* SkP0(temp_zero,U).
44[0:Inp] || SkP10(temp_zero,U) -> userId(temp_zero,U)* SkP9(temp_zero,U).
42[0:Inp] || SkP8(temp_zero,U) -> gender(temp_zero,U)* SkP7(temp_zero,U).
40[0:Inp] || SkP6(temp_zero,U) -> gender(temp_zero,U)* SkP5(temp_zero,U).
37[0:Inp] || SkP3(temp_zero,U) -> sugarLevel(temp_zero,U)* SkP2(temp_zero,U).
36[0:Inp] || SkP2(temp_zero,U) -> heartbeat(temp_zero,U)* SkP1(temp_zero,U).
70[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
69[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
68[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
67[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
66[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
65[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
64[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
63[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
62[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
61[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
60[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
59[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
58[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
57[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
53[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
52[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
51[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
50[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
49[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
48[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
47[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
56[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
55[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
54[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
46[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
71[0:Inp] || SkC0(temp_zero) -> blood(temp_zero,skc0)* sugarLevel(temp_zero,skc0) heartbeat(temp_zero,skc0).
73[0:Inp] || SkC0(temp_zero) PsubmitRTI(temp_zero,customer,cardioMon,skc0)* -> PsubmitRTI(temp_zero,skc1,cardioMon,skc0).
72[0:Inp] || SkC0(temp_zero) EQUAL(temp_zero,skc1,customer) PsubmitRTI(temp_zero,customer,cardioMon,skc0)* -> .
74[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),customer)* -> Pread(temp_zero,customer,cardioMon,U).
75[0:Inp] || Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP11(temp_zero,U).
76[0:Inp] || SkP0(temp_zero,skc2) Pread(temp_zero,customer,cardioMon,skc2) Pupdate(temp_zero,customer,cardioMon,skc2) Pdelete(temp_zero,customer,cardioMon,skc2)* -> SkC0(temp_zero).
77[0:Inp] || SkP11(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP10(temp_zero,U).
78[0:Inp] || SkP10(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP9(temp_zero,U).
79[0:Inp] || SkP9(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP8(temp_zero,U).
80[0:Inp] || SkP8(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP7(temp_zero,U).
81[0:Inp] || SkP7(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP6(temp_zero,U).
82[0:Inp] || SkP6(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP5(temp_zero,U).
83[0:Inp] || SkP5(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP4(temp_zero,U).
84[0:Inp] || SkP4(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP3(temp_zero,U).
85[0:Inp] || SkP3(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP2(temp_zero,U).
86[0:Inp] || SkP2(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP1(temp_zero,U).
87[0:Inp] || SkP1(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP0(temp_zero,U).
Eventuality Clauses:

TSPASS 0.95 
SPASS beiseite: Satisfiable.
Problem: tests/tmp_gen.fotl 
TSPASS derived 68 clauses, backtracked 0 clauses and kept 155 clauses.
Number of input clauses: 87
Number of eventualities: 0
Total number of generated clauses: 155
Number of forward-subsumed clauses: 0
Number of backward-subsumed clauses: 0
Total number of subsumed clauses: 0
Number of tautology clauses: 0
Number of clauses with different loop search markers: 0
Number of usable clauses left: 0
Number of worked-off clauses left: 155
Number of successful loop searches: 0
TSPASS allocated 615 KBytes.
TSPASS spent	0:00:00.01 (0.012s) on the problem.
		0:00:00.00 (0.004s) for the input.
		0:00:00.00 (0.004s) for the FLOTTER CNF translation.
		0:00:00.00 (0s) for inferences.
		0:00:00.00 (0s) for the backtracking.
		0:00:00.00 (0.004s) for the reduction.

--------------------------TSPASS-STOP------------------------------
