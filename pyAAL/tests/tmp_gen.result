
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For initial clauses:
5[0:Inp] ||  -> userId(skc0)*.    -> 5[0:Inp] ||  -> userId(temp_zero,skc0)*.
96[0:Inp] ||  -> Customer(CTS)*.    -> 96[0:Inp] ||  -> Customer(temp_zero,CTS)*.
98[0:Inp] ||  -> WDevice(CTS)*.    -> 98[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
100[0:Inp] ||  -> WCOAdmin(CTS)*.    -> 100[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
102[0:Inp] ||  -> WCOemployee(CTS)*.    -> 102[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
103[0:Inp] ||  -> DataProcessor(CTS)*.    -> 103[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
104[0:Inp] ||  -> DataController(CTS)*.    -> 104[0:Inp] ||  -> DataController(temp_zero,CTS)*.
105[0:Inp] ||  -> DataSubject(CTS)*.    -> 105[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
107[0:Inp] ||  -> country(CTS)*.    -> 107[0:Inp] ||  -> country(temp_zero,CTS)*.
109[0:Inp] ||  -> wellbeing(CTS)*.    -> 109[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
111[0:Inp] ||  -> activity(CTS)*.    -> 111[0:Inp] ||  -> activity(temp_zero,CTS)*.
113[0:Inp] ||  -> heartbeat(CTS)*.    -> 113[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
115[0:Inp] ||  -> blood(CTS)*.    -> 115[0:Inp] ||  -> blood(temp_zero,CTS)*.
117[0:Inp] ||  -> sugarLevel(CTS)*.    -> 117[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
119[0:Inp] ||  -> weight(CTS)*.    -> 119[0:Inp] ||  -> weight(temp_zero,CTS)*.
121[0:Inp] ||  -> height(CTS)*.    -> 121[0:Inp] ||  -> height(temp_zero,CTS)*.
123[0:Inp] ||  -> age(CTS)*.    -> 123[0:Inp] ||  -> age(temp_zero,CTS)*.
125[0:Inp] ||  -> gender(CTS)*.    -> 125[0:Inp] ||  -> gender(temp_zero,CTS)*.
127[0:Inp] ||  -> displayName(CTS)*.    -> 127[0:Inp] ||  -> displayName(temp_zero,CTS)*.
129[0:Inp] ||  -> userId(CTS)*.    -> 129[0:Inp] ||  -> userId(temp_zero,CTS)*.
131[0:Inp] ||  -> password(CTS)*.    -> 131[0:Inp] ||  -> password(temp_zero,CTS)*.
133[0:Inp] ||  -> username(CTS)*.    -> 133[0:Inp] ||  -> username(temp_zero,CTS)*.
135[0:Inp] ||  -> public(CTS)*.    -> 135[0:Inp] ||  -> public(temp_zero,CTS)*.
137[0:Inp] ||  -> sensitive(CTS)*.    -> 137[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
138[0:Inp] ||  -> EndUser(CTS)*.    -> 138[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
139[0:Inp] ||  -> CloudCustomer(CTS)*.    -> 139[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
140[0:Inp] ||  -> CloudProvider(CTS)*.    -> 140[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
141[0:Inp] ||  -> Auditor(CTS)*.    -> 141[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
142[0:Inp] ||  -> DwDataController(CTS)*.    -> 142[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
146[0:Inp] ||  -> Actor(CTS)*.    -> 146[0:Inp] ||  -> Actor(temp_zero,CTS)*.
147[0:Inp] ||  -> data(CTS)*.    -> 147[0:Inp] ||  -> data(temp_zero,CTS)*.
6[0:Inp] ||  -> EQUAL(subject(skc0),U)*.    -> 6[0:Inp] ||  -> EQUAL(temp_zero,subject(skc0),U)*.
1[0:Inp] || blood(U)* -> SkP0(U).    -> 1[0:Inp] || blood(temp_zero,U)* -> SkP0(temp_zero,U).
2[0:Inp] || sugarLevel(U)* -> SkP0(U).    -> 2[0:Inp] || sugarLevel(temp_zero,U)* -> SkP0(temp_zero,U).
3[0:Inp] || heartbeat(U)* -> SkP0(U).    -> 3[0:Inp] || heartbeat(temp_zero,U)* -> SkP0(temp_zero,U).
4[0:Inp] || Pread(U,cardioMon,skc0)* -> .    -> 4[0:Inp] || Pread(temp_zero,U,cardioMon,skc0)* -> .
8[0:Inp] || SkP0(U) -> PsubmitRTI(customer,cardioMon,U)*.    -> 8[0:Inp] || SkP0(temp_zero,U) -> PsubmitRTI(temp_zero,customer,cardioMon,U)*.
49[0:Inp] || requestDataCompliance(U,V,W) -> PrequestDataCompliance(U,V,W)*.    -> 49[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
50[0:Inp] || viewActiveUsers(U,V,W) -> PviewActiveUsers(U,V,W)*.    -> 50[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
51[0:Inp] || updateThresholds(U,V,W) -> PupdateThresholds(U,V,W)*.    -> 51[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
52[0:Inp] || manageBusinessFormula(U,V,W) -> PmanageBusinessFormula(U,V,W)*.    -> 52[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
53[0:Inp] || createBusinessProfile(U,V,W) -> PcreateBusinessProfile(U,V,W)*.    -> 53[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
54[0:Inp] || receiveBreachNotif(U,V,W) -> PreceiveBreachNotif(U,V,W)*.    -> 54[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
55[0:Inp] || receivePVA(U,V,W) -> PreceivePVA(U,V,W)*.    -> 55[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
56[0:Inp] || receiveAlerts(U,V,W) -> PreceiveAlerts(U,V,W)*.    -> 56[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
57[0:Inp] || requestDataPath(U,V,W) -> PrequestDataPath(U,V,W)*.    -> 57[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
58[0:Inp] || requestStat(U,V,W) -> PrequestStat(U,V,W)*.    -> 58[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
59[0:Inp] || getWellbeingScore(U,V,W) -> PgetWellbeingScore(U,V,W)*.    -> 59[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
60[0:Inp] || getWellbeingTraining(U,V,W) -> PgetWellbeingTraining(U,V,W)*.    -> 60[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
61[0:Inp] || updateWellbeing(U,V,W) -> PupdateWellbeing(U,V,W)*.    -> 61[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
62[0:Inp] || requestRTI(U,V,W) -> PrequestRTI(U,V,W)*.    -> 62[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
63[0:Inp] || submitRTI(U,V,W) -> PsubmitRTI(U,V,W)*.    -> 63[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
64[0:Inp] || delete(U,V,W) -> Pdelete(U,V,W)*.    -> 64[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
65[0:Inp] || update(U,V,W) -> Pupdate(U,V,W)*.    -> 65[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
66[0:Inp] || edit(U,V,W) -> Pedit(U,V,W)*.    -> 66[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
67[0:Inp] || add(U,V,W) -> Padd(U,V,W)*.    -> 67[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
68[0:Inp] || login(U,V,W) -> Plogin(U,V,W)*.    -> 68[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
69[0:Inp] || createCustomerProfile(U,V,W) -> PcreateCustomerProfile(U,V,W)*.    -> 69[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
71[0:Inp] || receiveTVA(U,V,W) -> PreceiveTVA(U,V,W)*.    -> 71[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
92[0:Inp] || audit(U,V,W) -> Paudit(U,V,W)*.    -> 92[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
93[0:Inp] || write(U,V,W) -> Pwrite(U,V,W)*.    -> 93[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
94[0:Inp] || read(U,V,W) -> Pread(U,V,W)*.    -> 94[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
7[0:Inp] || SkP0(U) PsubmitRTI(V,cardioMon,U)* -> EQUAL(V,customer).    -> 7[0:Inp] || SkP0(temp_zero,U) PsubmitRTI(temp_zero,V,cardioMon,U)* -> EQUAL(temp_zero,V,customer).
10[0:Inp] || username(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 10[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
11[0:Inp] || username(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 11[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
12[0:Inp] || username(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 12[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
13[0:Inp] || password(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 13[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
14[0:Inp] || password(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 14[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
15[0:Inp] || password(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 15[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
16[0:Inp] || userId(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 16[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
17[0:Inp] || userId(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 17[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
18[0:Inp] || userId(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 18[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
19[0:Inp] || displayName(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 19[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
20[0:Inp] || displayName(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 20[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
21[0:Inp] || displayName(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 21[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
22[0:Inp] || gender(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 22[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
23[0:Inp] || gender(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 23[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
24[0:Inp] || gender(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 24[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
25[0:Inp] || age(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 25[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
26[0:Inp] || age(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 26[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
27[0:Inp] || age(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 27[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
31[0:Inp] || height(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 31[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
32[0:Inp] || height(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 32[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
33[0:Inp] || height(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 33[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
34[0:Inp] || weight(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 34[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
35[0:Inp] || weight(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 35[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
36[0:Inp] || weight(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 36[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
37[0:Inp] || sugarLevel(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 37[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
38[0:Inp] || sugarLevel(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 38[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
39[0:Inp] || sugarLevel(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 39[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
40[0:Inp] || heartbeat(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 40[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
41[0:Inp] || heartbeat(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 41[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
42[0:Inp] || heartbeat(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 42[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
43[0:Inp] || activity(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 43[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
44[0:Inp] || activity(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 44[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
45[0:Inp] || activity(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 45[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
46[0:Inp] || country(U) EQUAL(subject(U),V)* -> Pdelete(V,cardioMon,U).    -> 46[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
47[0:Inp] || country(U) EQUAL(subject(U),V)* -> Pupdate(V,cardioMon,U).    -> 47[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
48[0:Inp] || country(U) EQUAL(subject(U),V)* -> Pread(V,cardioMon,U).    -> 48[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
9[0:Inp] || Pread(p,cardioMon,U) username(U) EQUAL(subject(U),V)* -> .    -> 9[0:Inp] || Pread(temp_zero,p,cardioMon,U) username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> .
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For universal clauses:
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
Non-Skolem constants contained in the problem: p, customer, cardioMon, temp_zero, CTS
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
Weight of the temporal successor function set to 1.
Step clauses:
--------------------------TSPASS-START-----------------------------
Input Problem:
1[0:Inp] ||  -> data(temp_zero,CTS)*.
2[0:Inp] ||  -> Actor(temp_zero,CTS)*.
3[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
4[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
5[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
6[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
7[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
8[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
9[0:Inp] ||  -> public(temp_zero,CTS)*.
10[0:Inp] ||  -> username(temp_zero,CTS)*.
11[0:Inp] ||  -> password(temp_zero,CTS)*.
12[0:Inp] ||  -> userId(temp_zero,CTS)*.
13[0:Inp] ||  -> displayName(temp_zero,CTS)*.
14[0:Inp] ||  -> gender(temp_zero,CTS)*.
15[0:Inp] ||  -> age(temp_zero,CTS)*.
16[0:Inp] ||  -> height(temp_zero,CTS)*.
17[0:Inp] ||  -> weight(temp_zero,CTS)*.
18[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
19[0:Inp] ||  -> blood(temp_zero,CTS)*.
20[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
21[0:Inp] ||  -> activity(temp_zero,CTS)*.
22[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
23[0:Inp] ||  -> country(temp_zero,CTS)*.
24[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
25[0:Inp] ||  -> DataController(temp_zero,CTS)*.
26[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
27[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
28[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
29[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
30[0:Inp] ||  -> Customer(temp_zero,CTS)*.
31[0:Inp] ||  -> userId(temp_zero,skc0)*.
32[0:Inp] ||  -> EQUAL(temp_zero,subject(skc0),U)*.
33[0:Inp] || Pread(temp_zero,U,cardioMon,skc0)* -> .
34[0:Inp] || heartbeat(temp_zero,U)* -> SkP0(temp_zero,U).
35[0:Inp] || sugarLevel(temp_zero,U)* -> SkP0(temp_zero,U).
36[0:Inp] || blood(temp_zero,U)* -> SkP0(temp_zero,U).
37[0:Inp] || SkP0(temp_zero,U) -> PsubmitRTI(temp_zero,customer,cardioMon,U)*.
38[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
39[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
40[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
41[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
42[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
43[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
44[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
45[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
46[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
47[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
48[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
49[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
50[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
51[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
52[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
53[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
54[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
55[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
56[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
57[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
58[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
59[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
60[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
61[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
62[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
63[0:Inp] || SkP0(temp_zero,U) PsubmitRTI(temp_zero,V,cardioMon,U)* -> EQUAL(temp_zero,V,customer).
64[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
65[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
66[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
67[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
68[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
69[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
70[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
71[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
72[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
73[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
74[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
75[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
76[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
77[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
78[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
79[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
80[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
81[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
82[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
83[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
84[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
85[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
86[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
87[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
88[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
89[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
90[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
91[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
92[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
93[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
94[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
95[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
96[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
97[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
98[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
99[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
100[0:Inp] || Pread(temp_zero,p,cardioMon,U) username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> .
 This is a first-order Horn problem without equality.
 Axiom clauses: 100 Conjecture clauses: 0
 Inferences: IORe=1 IOFc=1 
 Reductions: RObv=1 RTaut=1 RFSub=1 RBSub=1 
 Extras    : No Input Saturation, No Selection, No Splitting, Full Reduction,  Ratio: 5, FuncWeight: 1, VarWeight: 1
 Precedence: div > id > c^l > temp_succ > temp_shield > temp_zero > CTS > cardioMon > customer > p > subject > Actor > Auditor > CloudCustomer > CloudProvider > Customer > DataController > DataProcessor > DataSubject > DwDataController > EQUAL > EndUser > Padd > Paudit > PcreateBusinessProfile > PcreateCustomerProfile > Pdelete > Pedit > PgetWellbeingScore > PgetWellbeingTraining > Plogin > PmanageBusinessFormula > Pread > PreceiveAlerts > PreceiveBreachNotif > PreceivePVA > PreceiveTVA > PrequestDataCompliance > PrequestDataPath > PrequestRTI > PrequestStat > PsubmitRTI > Pupdate > PupdateThresholds > PupdateWellbeing > PviewActiveUsers > Pwrite > WCOAdmin > WCOemployee > WDevice > activity > add > age > audit > blood > country > createBusinessProfile > createCustomerProfile > data > delete > displayName > edit > gender > getWellbeingScore > getWellbeingTraining > heartbeat > height > login > manageBusinessFormula > password > public > read > receiveAlerts > receiveBreachNotif > receivePVA > receiveTVA > requestDataCompliance > requestDataPath > requestRTI > requestStat > sensitive > submitRTI > sugarLevel > update > updateThresholds > updateWellbeing > userId > username > viewActiveUsers > weight > wellbeing > write > SkP0 > skc0
 Ordering  : KBO
Processed Problem:

Worked Off Clauses:

Usable Clauses:
30[0:Inp] ||  -> Customer(temp_zero,CTS)*.
29[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
28[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
27[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
26[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
25[0:Inp] ||  -> DataController(temp_zero,CTS)*.
24[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
22[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
9[0:Inp] ||  -> public(temp_zero,CTS)*.
8[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
7[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
6[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
5[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
4[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
3[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
2[0:Inp] ||  -> Actor(temp_zero,CTS)*.
1[0:Inp] ||  -> data(temp_zero,CTS)*.
19[0:Inp] ||  -> blood(temp_zero,CTS)*.
23[0:Inp] ||  -> country(temp_zero,CTS)*.
21[0:Inp] ||  -> activity(temp_zero,CTS)*.
17[0:Inp] ||  -> weight(temp_zero,CTS)*.
16[0:Inp] ||  -> height(temp_zero,CTS)*.
15[0:Inp] ||  -> age(temp_zero,CTS)*.
14[0:Inp] ||  -> gender(temp_zero,CTS)*.
13[0:Inp] ||  -> displayName(temp_zero,CTS)*.
11[0:Inp] ||  -> password(temp_zero,CTS)*.
31[0:Inp] ||  -> userId(temp_zero,skc0)*.
20[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
18[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
12[0:Inp] ||  -> userId(temp_zero,CTS)*.
10[0:Inp] ||  -> username(temp_zero,CTS)*.
32[0:Inp] ||  -> EQUAL(temp_zero,subject(skc0),U)*.
33[0:Inp] || Pread(temp_zero,U,cardioMon,skc0)* -> .
36[0:Inp] || blood(temp_zero,U)* -> SkP0(temp_zero,U).
35[0:Inp] || sugarLevel(temp_zero,U)* -> SkP0(temp_zero,U).
34[0:Inp] || heartbeat(temp_zero,U)* -> SkP0(temp_zero,U).
37[0:Inp] || SkP0(temp_zero,U) -> PsubmitRTI(temp_zero,customer,cardioMon,U)*.
62[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
61[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
60[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
59[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
58[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
57[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
56[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
55[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
54[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
53[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
52[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
51[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
50[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
49[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
45[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
44[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
43[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
42[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
41[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
40[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
39[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
48[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
47[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
46[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
38[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
63[0:Inp] || SkP0(temp_zero,U) PsubmitRTI(temp_zero,V,cardioMon,U)* -> EQUAL(temp_zero,V,customer).
96[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
95[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
90[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
89[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
87[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
86[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
84[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
83[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
81[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
80[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
78[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
77[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
69[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
68[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
66[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
65[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
99[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
98[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
93[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
92[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
75[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
74[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
72[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pdelete(temp_zero,V,cardioMon,U).
71[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pupdate(temp_zero,V,cardioMon,U).
94[0:Inp] || password(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
88[0:Inp] || displayName(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
85[0:Inp] || gender(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
82[0:Inp] || age(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
79[0:Inp] || height(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
76[0:Inp] || weight(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
67[0:Inp] || activity(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
64[0:Inp] || country(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
97[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
91[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
73[0:Inp] || sugarLevel(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
70[0:Inp] || heartbeat(temp_zero,U) EQUAL(temp_zero,subject(U),V)* -> Pread(temp_zero,V,cardioMon,U).
100[0:Inp] || username(temp_zero,U) EQUAL(temp_zero,subject(U),V)* Pread(temp_zero,p,cardioMon,U) -> .
Eventuality Clauses:

TSPASS 0.95 
SPASS beiseite: Unsatisfiable.
Problem: tests/tmp_gen.fotl 
TSPASS derived 52 clauses, backtracked 0 clauses and kept 149 clauses.
Number of input clauses: 100
Number of eventualities: 0
Total number of generated clauses: 152
Number of forward-subsumed clauses: 2
Number of backward-subsumed clauses: 30
Total number of subsumed clauses: 32
Number of tautology clauses: 0
Number of clauses with different loop search markers: 0
Number of usable clauses left: 3
Number of worked-off clauses left: 116
Number of successful loop searches: 0
TSPASS allocated 628 KBytes.
TSPASS spent	0:00:00.02 (0.016001s) on the problem.
		0:00:00.00 (0.004s) for the input.
		0:00:00.00 (0.004s) for the FLOTTER CNF translation.
		0:00:00.00 (0s) for inferences.
		0:00:00.00 (0s) for the backtracking.
		0:00:00.00 (0.004001s) for the reduction.

--------------------------TSPASS-STOP------------------------------
