
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For initial clauses:
1[0:Inp] ||  -> SkP11(U) username(U)*.    -> 1[0:Inp] ||  -> SkP11(temp_zero,U) username(temp_zero,U)*.
27[0:Inp] ||  -> EQUAL(subject(skc0),customer)*.    -> 27[0:Inp] ||  -> EQUAL(temp_zero,subject(skc0),customer)*.
25[0:Inp] || SkP0(skc0) -> country(skc0)*.    -> 25[0:Inp] || SkP0(temp_zero,skc0) -> country(temp_zero,skc0)*.
4[0:Inp] || SkP11(U) -> SkP10(U) password(U)*.    -> 4[0:Inp] || SkP11(temp_zero,U) -> SkP10(temp_zero,U) password(temp_zero,U)*.
6[0:Inp] || SkP10(U) -> SkP9(U) userId(U)*.    -> 6[0:Inp] || SkP10(temp_zero,U) -> SkP9(temp_zero,U) userId(temp_zero,U)*.
8[0:Inp] || SkP9(U) -> SkP8(U) displayName(U)*.    -> 8[0:Inp] || SkP9(temp_zero,U) -> SkP8(temp_zero,U) displayName(temp_zero,U)*.
10[0:Inp] || SkP8(U) -> SkP7(U) gender(U)*.    -> 10[0:Inp] || SkP8(temp_zero,U) -> SkP7(temp_zero,U) gender(temp_zero,U)*.
12[0:Inp] || SkP7(U) -> SkP6(U) age(U)*.    -> 12[0:Inp] || SkP7(temp_zero,U) -> SkP6(temp_zero,U) age(temp_zero,U)*.
14[0:Inp] || SkP6(U) -> SkP5(U) gender(U)*.    -> 14[0:Inp] || SkP6(temp_zero,U) -> SkP5(temp_zero,U) gender(temp_zero,U)*.
16[0:Inp] || SkP5(U) -> SkP4(U) height(U)*.    -> 16[0:Inp] || SkP5(temp_zero,U) -> SkP4(temp_zero,U) height(temp_zero,U)*.
18[0:Inp] || SkP4(U) -> SkP3(U) weight(U)*.    -> 18[0:Inp] || SkP4(temp_zero,U) -> SkP3(temp_zero,U) weight(temp_zero,U)*.
20[0:Inp] || SkP3(U) -> SkP2(U) sugarLevel(U)*.    -> 20[0:Inp] || SkP3(temp_zero,U) -> SkP2(temp_zero,U) sugarLevel(temp_zero,U)*.
22[0:Inp] || SkP2(U) -> SkP1(U) heartbeat(U)*.    -> 22[0:Inp] || SkP2(temp_zero,U) -> SkP1(temp_zero,U) heartbeat(temp_zero,U)*.
24[0:Inp] || SkP1(U) -> SkP0(U) activity(U)*.    -> 24[0:Inp] || SkP1(temp_zero,U) -> SkP0(temp_zero,U) activity(temp_zero,U)*.
28[0:Inp] || userId(U) EQUAL(subject(U),customer)* -> Pread(customer,cardioMon,U).    -> 28[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),customer)* -> Pread(temp_zero,customer,cardioMon,U).
2[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) -> SkP11(U).    -> 2[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) -> SkP11(temp_zero,U).
26[0:Inp] || Pdelete(customer,cardioMon,skc0)* Pupdate(customer,cardioMon,skc0) Pread(customer,cardioMon,skc0) SkP0(skc0) -> .    -> 26[0:Inp] || Pdelete(temp_zero,customer,cardioMon,skc0)* Pupdate(temp_zero,customer,cardioMon,skc0) Pread(temp_zero,customer,cardioMon,skc0) SkP0(temp_zero,skc0) -> .
3[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP11(U) -> SkP10(U).    -> 3[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP11(temp_zero,U) -> SkP10(temp_zero,U).
5[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP10(U) -> SkP9(U).    -> 5[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP10(temp_zero,U) -> SkP9(temp_zero,U).
7[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP9(U) -> SkP8(U).    -> 7[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP9(temp_zero,U) -> SkP8(temp_zero,U).
9[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP8(U) -> SkP7(U).    -> 9[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP8(temp_zero,U) -> SkP7(temp_zero,U).
11[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP7(U) -> SkP6(U).    -> 11[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP7(temp_zero,U) -> SkP6(temp_zero,U).
13[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP6(U) -> SkP5(U).    -> 13[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP6(temp_zero,U) -> SkP5(temp_zero,U).
15[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP5(U) -> SkP4(U).    -> 15[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP5(temp_zero,U) -> SkP4(temp_zero,U).
17[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP4(U) -> SkP3(U).    -> 17[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP4(temp_zero,U) -> SkP3(temp_zero,U).
19[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP3(U) -> SkP2(U).    -> 19[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP3(temp_zero,U) -> SkP2(temp_zero,U).
21[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP2(U) -> SkP1(U).    -> 21[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP2(temp_zero,U) -> SkP1(temp_zero,U).
23[0:Inp] || Pdelete(customer,cardioMon,U)* Pupdate(customer,cardioMon,U) Pread(customer,cardioMon,U) SkP1(U) -> SkP0(U).    -> 23[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP1(temp_zero,U) -> SkP0(temp_zero,U).
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For universal clauses:
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
Non-Skolem constants contained in the problem: cardioMon, temp_zero, customer
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
Weight of the temporal successor function set to 1.
Step clauses:
--------------------------TSPASS-START-----------------------------
Input Problem:
1[0:Inp] ||  -> EQUAL(temp_zero,subject(skc0),customer)*.
2[0:Inp] ||  -> SkP11(temp_zero,U) username(temp_zero,U)*.
3[0:Inp] || SkP0(temp_zero,skc0) -> country(temp_zero,skc0)*.
4[0:Inp] || SkP1(temp_zero,U) -> SkP0(temp_zero,U) activity(temp_zero,U)*.
5[0:Inp] || SkP2(temp_zero,U) -> SkP1(temp_zero,U) heartbeat(temp_zero,U)*.
6[0:Inp] || SkP3(temp_zero,U) -> SkP2(temp_zero,U) sugarLevel(temp_zero,U)*.
7[0:Inp] || SkP4(temp_zero,U) -> SkP3(temp_zero,U) weight(temp_zero,U)*.
8[0:Inp] || SkP5(temp_zero,U) -> SkP4(temp_zero,U) height(temp_zero,U)*.
9[0:Inp] || SkP6(temp_zero,U) -> SkP5(temp_zero,U) gender(temp_zero,U)*.
10[0:Inp] || SkP7(temp_zero,U) -> SkP6(temp_zero,U) age(temp_zero,U)*.
11[0:Inp] || SkP8(temp_zero,U) -> SkP7(temp_zero,U) gender(temp_zero,U)*.
12[0:Inp] || SkP9(temp_zero,U) -> SkP8(temp_zero,U) displayName(temp_zero,U)*.
13[0:Inp] || SkP10(temp_zero,U) -> SkP9(temp_zero,U) userId(temp_zero,U)*.
14[0:Inp] || SkP11(temp_zero,U) -> SkP10(temp_zero,U) password(temp_zero,U)*.
15[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),customer)* -> Pread(temp_zero,customer,cardioMon,U).
16[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) -> SkP11(temp_zero,U).
17[0:Inp] || Pdelete(temp_zero,customer,cardioMon,skc0)* Pupdate(temp_zero,customer,cardioMon,skc0) Pread(temp_zero,customer,cardioMon,skc0) SkP0(temp_zero,skc0) -> .
18[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP11(temp_zero,U) -> SkP10(temp_zero,U).
19[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP10(temp_zero,U) -> SkP9(temp_zero,U).
20[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP9(temp_zero,U) -> SkP8(temp_zero,U).
21[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP8(temp_zero,U) -> SkP7(temp_zero,U).
22[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP7(temp_zero,U) -> SkP6(temp_zero,U).
23[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP6(temp_zero,U) -> SkP5(temp_zero,U).
24[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP5(temp_zero,U) -> SkP4(temp_zero,U).
25[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP4(temp_zero,U) -> SkP3(temp_zero,U).
26[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP3(temp_zero,U) -> SkP2(temp_zero,U).
27[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP2(temp_zero,U) -> SkP1(temp_zero,U).
28[0:Inp] || Pdelete(temp_zero,customer,cardioMon,U)* Pupdate(temp_zero,customer,cardioMon,U) Pread(temp_zero,customer,cardioMon,U) SkP1(temp_zero,U) -> SkP0(temp_zero,U).
 This is a first-order Non-Horn problem without equality.
 Axiom clauses: 28 Conjecture clauses: 0
 Inferences: IORe=1 IOFc=1 
 Reductions: RObv=1 RTaut=1 RFSub=1 RBSub=1 
 Extras    : No Input Saturation, No Selection, No Splitting, Full Reduction,  Ratio: 5, FuncWeight: 1, VarWeight: 1
 Precedence: div > id > c^l > temp_succ > temp_shield > temp_zero > cardioMon > customer > subject > EQUAL > Pdelete > Pread > Pupdate > activity > age > country > displayName > gender > heartbeat > height > password > sugarLevel > userId > username > weight > SkP0 > SkP1 > SkP2 > SkP3 > SkP4 > SkP5 > SkP6 > SkP7 > SkP8 > SkP9 > SkP10 > SkP11 > skc0
 Ordering  : KBO
Processed Problem:

Worked Off Clauses:

Usable Clauses:
1[0:Inp] ||  -> EQUAL(temp_zero,subject(skc0),customer)*.
2[0:Inp] ||  -> username(temp_zero,U)* SkP11(temp_zero,U).
3[0:Inp] || SkP0(temp_zero,skc0) -> country(temp_zero,skc0)*.
14[0:Inp] || SkP11(temp_zero,U) -> password(temp_zero,U)* SkP10(temp_zero,U).
12[0:Inp] || SkP9(temp_zero,U) -> displayName(temp_zero,U)* SkP8(temp_zero,U).
10[0:Inp] || SkP7(temp_zero,U) -> age(temp_zero,U)* SkP6(temp_zero,U).
8[0:Inp] || SkP5(temp_zero,U) -> height(temp_zero,U)* SkP4(temp_zero,U).
7[0:Inp] || SkP4(temp_zero,U) -> weight(temp_zero,U)* SkP3(temp_zero,U).
6[0:Inp] || SkP3(temp_zero,U) -> sugarLevel(temp_zero,U)* SkP2(temp_zero,U).
5[0:Inp] || SkP2(temp_zero,U) -> heartbeat(temp_zero,U)* SkP1(temp_zero,U).
4[0:Inp] || SkP1(temp_zero,U) -> activity(temp_zero,U)* SkP0(temp_zero,U).
13[0:Inp] || SkP10(temp_zero,U) -> userId(temp_zero,U)* SkP9(temp_zero,U).
11[0:Inp] || SkP8(temp_zero,U) -> gender(temp_zero,U)* SkP7(temp_zero,U).
9[0:Inp] || SkP6(temp_zero,U) -> gender(temp_zero,U)* SkP5(temp_zero,U).
15[0:Inp] || userId(temp_zero,U) EQUAL(temp_zero,subject(U),customer)* -> Pread(temp_zero,customer,cardioMon,U).
16[0:Inp] || Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP11(temp_zero,U).
17[0:Inp] || SkP0(temp_zero,skc0) Pread(temp_zero,customer,cardioMon,skc0) Pupdate(temp_zero,customer,cardioMon,skc0) Pdelete(temp_zero,customer,cardioMon,skc0)* -> .
18[0:Inp] || SkP11(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP10(temp_zero,U).
19[0:Inp] || SkP10(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP9(temp_zero,U).
20[0:Inp] || SkP9(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP8(temp_zero,U).
21[0:Inp] || SkP8(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP7(temp_zero,U).
22[0:Inp] || SkP7(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP6(temp_zero,U).
23[0:Inp] || SkP6(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP5(temp_zero,U).
24[0:Inp] || SkP5(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP4(temp_zero,U).
25[0:Inp] || SkP4(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP3(temp_zero,U).
26[0:Inp] || SkP3(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP2(temp_zero,U).
27[0:Inp] || SkP2(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP1(temp_zero,U).
28[0:Inp] || SkP1(temp_zero,U) Pread(temp_zero,customer,cardioMon,U) Pupdate(temp_zero,customer,cardioMon,U) Pdelete(temp_zero,customer,cardioMon,U)* -> SkP0(temp_zero,U).
Eventuality Clauses:

TSPASS 0.95 
SPASS beiseite: Satisfiable.
Problem: tests/tmp_gen.fotl 
TSPASS derived 1 clauses, backtracked 0 clauses and kept 29 clauses.
Number of input clauses: 28
Number of eventualities: 0
Total number of generated clauses: 29
Number of forward-subsumed clauses: 0
Number of backward-subsumed clauses: 0
Total number of subsumed clauses: 0
Number of tautology clauses: 0
Number of clauses with different loop search markers: 0
Number of usable clauses left: 0
Number of worked-off clauses left: 29
Number of successful loop searches: 0
TSPASS allocated 530 KBytes.
TSPASS spent	0:00:00.01 (0.008s) on the problem.
		0:00:00.00 (0s) for the input.
		0:00:00.00 (0.004s) for the FLOTTER CNF translation.
		0:00:00.00 (0.004s) for inferences.
		0:00:00.00 (0s) for the backtracking.
		0:00:00.00 (0s) for the reduction.

--------------------------TSPASS-STOP------------------------------
