
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For initial clauses:
5[0:Inp] ||  -> data(U)*.    -> 5[0:Inp] ||  -> data(temp_zero,U)*.
8[0:Inp] ||  -> DataProcessor(dataSpacer)*.    -> 8[0:Inp] ||  -> DataProcessor(temp_zero,dataSpacer)*.
9[0:Inp] ||  -> DataProcessor(mapOnWeb)*.    -> 9[0:Inp] ||  -> DataProcessor(temp_zero,mapOnWeb)*.
10[0:Inp] ||  -> DataProcessor(cardioMon)*.    -> 10[0:Inp] ||  -> DataProcessor(temp_zero,cardioMon)*.
11[0:Inp] ||  -> DataController(wearableCo)*.    -> 11[0:Inp] ||  -> DataController(temp_zero,wearableCo)*.
12[0:Inp] ||  -> DataSubject(customer2)*.    -> 12[0:Inp] ||  -> DataSubject(temp_zero,customer2)*.
13[0:Inp] ||  -> Customer(kim)*.    -> 13[0:Inp] ||  -> Customer(temp_zero,kim)*.
14[0:Inp] ||  -> Actor(PO)*.    -> 14[0:Inp] ||  -> Actor(temp_zero,PO)*.
15[0:Inp] ||  -> Actor(auditor)*.    -> 15[0:Inp] ||  -> Actor(temp_zero,auditor)*.
63[0:Inp] ||  -> Customer(CTS)*.    -> 63[0:Inp] ||  -> Customer(temp_zero,CTS)*.
65[0:Inp] ||  -> WDevice(CTS)*.    -> 65[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
67[0:Inp] ||  -> WCOAdmin(CTS)*.    -> 67[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
69[0:Inp] ||  -> WCOemployee(CTS)*.    -> 69[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
70[0:Inp] ||  -> DataProcessor(CTS)*.    -> 70[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
71[0:Inp] ||  -> DataController(CTS)*.    -> 71[0:Inp] ||  -> DataController(temp_zero,CTS)*.
72[0:Inp] ||  -> DataSubject(CTS)*.    -> 72[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
74[0:Inp] ||  -> country(CTS)*.    -> 74[0:Inp] ||  -> country(temp_zero,CTS)*.
76[0:Inp] ||  -> wellbeing(CTS)*.    -> 76[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
78[0:Inp] ||  -> activity(CTS)*.    -> 78[0:Inp] ||  -> activity(temp_zero,CTS)*.
80[0:Inp] ||  -> heartbeat(CTS)*.    -> 80[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
82[0:Inp] ||  -> blood(CTS)*.    -> 82[0:Inp] ||  -> blood(temp_zero,CTS)*.
84[0:Inp] ||  -> sugarLevel(CTS)*.    -> 84[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
86[0:Inp] ||  -> weight(CTS)*.    -> 86[0:Inp] ||  -> weight(temp_zero,CTS)*.
88[0:Inp] ||  -> height(CTS)*.    -> 88[0:Inp] ||  -> height(temp_zero,CTS)*.
90[0:Inp] ||  -> age(CTS)*.    -> 90[0:Inp] ||  -> age(temp_zero,CTS)*.
92[0:Inp] ||  -> gender(CTS)*.    -> 92[0:Inp] ||  -> gender(temp_zero,CTS)*.
94[0:Inp] ||  -> displayName(CTS)*.    -> 94[0:Inp] ||  -> displayName(temp_zero,CTS)*.
96[0:Inp] ||  -> userId(CTS)*.    -> 96[0:Inp] ||  -> userId(temp_zero,CTS)*.
98[0:Inp] ||  -> password(CTS)*.    -> 98[0:Inp] ||  -> password(temp_zero,CTS)*.
100[0:Inp] ||  -> username(CTS)*.    -> 100[0:Inp] ||  -> username(temp_zero,CTS)*.
102[0:Inp] ||  -> public(CTS)*.    -> 102[0:Inp] ||  -> public(temp_zero,CTS)*.
104[0:Inp] ||  -> sensitive(CTS)*.    -> 104[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
105[0:Inp] ||  -> EndUser(CTS)*.    -> 105[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
106[0:Inp] ||  -> CloudCustomer(CTS)*.    -> 106[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
107[0:Inp] ||  -> CloudProvider(CTS)*.    -> 107[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
108[0:Inp] ||  -> Auditor(CTS)*.    -> 108[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
109[0:Inp] ||  -> DwDataController(CTS)*.    -> 109[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
113[0:Inp] ||  -> Actor(CTS)*.    -> 113[0:Inp] ||  -> Actor(temp_zero,CTS)*.
6[0:Inp] || sevenMonths* -> sixMonths.    -> 6[0:Inp] || sevenMonths(temp_zero)* -> sixMonths(temp_zero).
7[0:Inp] || sixMonths -> fiveMonths*.    -> 7[0:Inp] || sixMonths(temp_zero) -> fiveMonths(temp_zero)*.
3[0:Inp] || data(skc0)* -> fiveMonths.    -> 3[0:Inp] || data(temp_zero,skc0)* -> fiveMonths(temp_zero).
4[0:Inp] || sixMonths -> delete(mapOnWeb,mapOnWeb,U)*.    -> 4[0:Inp] || sixMonths(temp_zero) -> delete(temp_zero,mapOnWeb,mapOnWeb,U)*.
1[0:Inp] || data(skc0) -> EQUAL(subject(skc1),kim)*.    -> 1[0:Inp] || data(temp_zero,skc0) -> EQUAL(temp_zero,subject(skc1),kim)*.
2[0:Inp] || delete(mapOnWeb,mapOnWeb,skc1)* data(skc0) -> .    -> 2[0:Inp] || delete(temp_zero,mapOnWeb,mapOnWeb,skc1)* data(temp_zero,skc0) -> .
16[0:Inp] || requestDataCompliance(U,V,W) -> PrequestDataCompliance(U,V,W)*.    -> 16[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
17[0:Inp] || viewActiveUsers(U,V,W) -> PviewActiveUsers(U,V,W)*.    -> 17[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
18[0:Inp] || updateThresholds(U,V,W) -> PupdateThresholds(U,V,W)*.    -> 18[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
19[0:Inp] || manageBusinessFormula(U,V,W) -> PmanageBusinessFormula(U,V,W)*.    -> 19[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
20[0:Inp] || createBusinessProfile(U,V,W) -> PcreateBusinessProfile(U,V,W)*.    -> 20[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
21[0:Inp] || receiveBreachNotif(U,V,W) -> PreceiveBreachNotif(U,V,W)*.    -> 21[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
22[0:Inp] || receivePVA(U,V,W) -> PreceivePVA(U,V,W)*.    -> 22[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
23[0:Inp] || receiveAlerts(U,V,W) -> PreceiveAlerts(U,V,W)*.    -> 23[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
24[0:Inp] || requestDataPath(U,V,W) -> PrequestDataPath(U,V,W)*.    -> 24[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
25[0:Inp] || requestStat(U,V,W) -> PrequestStat(U,V,W)*.    -> 25[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
26[0:Inp] || getWellbeingScore(U,V,W) -> PgetWellbeingScore(U,V,W)*.    -> 26[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
27[0:Inp] || getWellbeingTraining(U,V,W) -> PgetWellbeingTraining(U,V,W)*.    -> 27[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
28[0:Inp] || updateWellbeing(U,V,W) -> PupdateWellbeing(U,V,W)*.    -> 28[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
29[0:Inp] || requestRTI(U,V,W) -> PrequestRTI(U,V,W)*.    -> 29[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
30[0:Inp] || submitRTI(U,V,W) -> PsubmitRTI(U,V,W)*.    -> 30[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
31[0:Inp] || delete(U,V,W) -> Pdelete(U,V,W)*.    -> 31[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
32[0:Inp] || update(U,V,W) -> Pupdate(U,V,W)*.    -> 32[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
33[0:Inp] || edit(U,V,W) -> Pedit(U,V,W)*.    -> 33[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
34[0:Inp] || add(U,V,W) -> Padd(U,V,W)*.    -> 34[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
35[0:Inp] || login(U,V,W) -> Plogin(U,V,W)*.    -> 35[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
36[0:Inp] || createCustomerProfile(U,V,W) -> PcreateCustomerProfile(U,V,W)*.    -> 36[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
38[0:Inp] || receiveTVA(U,V,W) -> PreceiveTVA(U,V,W)*.    -> 38[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
59[0:Inp] || audit(U,V,W) -> Paudit(U,V,W)*.    -> 59[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
60[0:Inp] || write(U,V,W) -> Pwrite(U,V,W)*.    -> 60[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
61[0:Inp] || read(U,V,W) -> Pread(U,V,W)*.    -> 61[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
------------------TEMPORAL-LOGIC-TRANSLATION-START-----------------------
For universal clauses:
------------------TEMPORAL-LOGIC-TRANSLATION-STOP------------------------
Non-Skolem constants contained in the problem: dataSpacer, mapOnWeb, cardioMon, wearableCo, customer2, kim, PO, auditor, temp_zero, CTS
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
-------------------------CONSTANT-FLOODING START-------------------------
-------------------------CONSTANT-FLOODING STOP--------------------------
Weight of the temporal successor function set to 1.
Step clauses:
--------------------------TSPASS-START-----------------------------
Input Problem:
1[0:Inp] ||  -> Actor(temp_zero,CTS)*.
2[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
3[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
4[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
5[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
6[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
7[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
8[0:Inp] ||  -> public(temp_zero,CTS)*.
9[0:Inp] ||  -> username(temp_zero,CTS)*.
10[0:Inp] ||  -> password(temp_zero,CTS)*.
11[0:Inp] ||  -> userId(temp_zero,CTS)*.
12[0:Inp] ||  -> displayName(temp_zero,CTS)*.
13[0:Inp] ||  -> gender(temp_zero,CTS)*.
14[0:Inp] ||  -> age(temp_zero,CTS)*.
15[0:Inp] ||  -> height(temp_zero,CTS)*.
16[0:Inp] ||  -> weight(temp_zero,CTS)*.
17[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
18[0:Inp] ||  -> blood(temp_zero,CTS)*.
19[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
20[0:Inp] ||  -> activity(temp_zero,CTS)*.
21[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
22[0:Inp] ||  -> country(temp_zero,CTS)*.
23[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
24[0:Inp] ||  -> DataController(temp_zero,CTS)*.
25[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
26[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
27[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
28[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
29[0:Inp] ||  -> Customer(temp_zero,CTS)*.
30[0:Inp] ||  -> Actor(temp_zero,auditor)*.
31[0:Inp] ||  -> Actor(temp_zero,PO)*.
32[0:Inp] ||  -> Customer(temp_zero,kim)*.
33[0:Inp] ||  -> DataSubject(temp_zero,customer2)*.
34[0:Inp] ||  -> DataController(temp_zero,wearableCo)*.
35[0:Inp] ||  -> DataProcessor(temp_zero,cardioMon)*.
36[0:Inp] ||  -> DataProcessor(temp_zero,mapOnWeb)*.
37[0:Inp] ||  -> DataProcessor(temp_zero,dataSpacer)*.
38[0:Inp] ||  -> data(temp_zero,U)*.
39[0:Inp] || sixMonths(temp_zero) -> fiveMonths(temp_zero)*.
40[0:Inp] || sevenMonths(temp_zero)* -> sixMonths(temp_zero).
41[0:Inp] || data(temp_zero,skc0)* -> fiveMonths(temp_zero).
42[0:Inp] || sixMonths(temp_zero) -> delete(temp_zero,mapOnWeb,mapOnWeb,U)*.
43[0:Inp] || data(temp_zero,skc0) -> EQUAL(temp_zero,subject(skc1),kim)*.
44[0:Inp] || delete(temp_zero,mapOnWeb,mapOnWeb,skc1)* data(temp_zero,skc0) -> .
45[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
46[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
47[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
48[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
49[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
50[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
51[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
52[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
53[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
54[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
55[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
56[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
57[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
58[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
59[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
60[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
61[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
62[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
63[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
64[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
65[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
66[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
67[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
68[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
69[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
 This is a first-order Horn problem without equality.
 Axiom clauses: 69 Conjecture clauses: 0
 Inferences: IORe=1 IOFc=1 
 Reductions: RObv=1 RTaut=1 RFSub=1 RBSub=1 
 Extras    : No Input Saturation, No Selection, No Splitting, Full Reduction,  Ratio: 5, FuncWeight: 1, VarWeight: 1
 Precedence: div > id > c^l > temp_succ > temp_shield > temp_zero > CTS > PO > auditor > cardioMon > customer2 > dataSpacer > kim > mapOnWeb > subject > wearableCo > Actor > Auditor > CloudCustomer > CloudProvider > Customer > DataController > DataProcessor > DataSubject > DwDataController > EQUAL > EndUser > Padd > Paudit > PcreateBusinessProfile > PcreateCustomerProfile > Pdelete > Pedit > PgetWellbeingScore > PgetWellbeingTraining > Plogin > PmanageBusinessFormula > Pread > PreceiveAlerts > PreceiveBreachNotif > PreceivePVA > PreceiveTVA > PrequestDataCompliance > PrequestDataPath > PrequestRTI > PrequestStat > PsubmitRTI > Pupdate > PupdateThresholds > PupdateWellbeing > PviewActiveUsers > Pwrite > WCOAdmin > WCOemployee > WDevice > activity > add > age > audit > blood > country > createBusinessProfile > createCustomerProfile > data > delete > displayName > edit > fiveMonths > gender > getWellbeingScore > getWellbeingTraining > heartbeat > height > login > manageBusinessFormula > password > public > read > receiveAlerts > receiveBreachNotif > receivePVA > receiveTVA > requestDataCompliance > requestDataPath > requestRTI > requestStat > sensitive > sevenMonths > sixMonths > submitRTI > sugarLevel > update > updateThresholds > updateWellbeing > userId > username > viewActiveUsers > weight > wellbeing > write > skc0 > skc1
 Ordering  : KBO
Processed Problem:

Worked Off Clauses:

Usable Clauses:
28[0:Inp] ||  -> WDevice(temp_zero,CTS)*.
27[0:Inp] ||  -> WCOAdmin(temp_zero,CTS)*.
26[0:Inp] ||  -> WCOemployee(temp_zero,CTS)*.
22[0:Inp] ||  -> country(temp_zero,CTS)*.
21[0:Inp] ||  -> wellbeing(temp_zero,CTS)*.
20[0:Inp] ||  -> activity(temp_zero,CTS)*.
19[0:Inp] ||  -> heartbeat(temp_zero,CTS)*.
18[0:Inp] ||  -> blood(temp_zero,CTS)*.
17[0:Inp] ||  -> sugarLevel(temp_zero,CTS)*.
16[0:Inp] ||  -> weight(temp_zero,CTS)*.
15[0:Inp] ||  -> height(temp_zero,CTS)*.
14[0:Inp] ||  -> age(temp_zero,CTS)*.
13[0:Inp] ||  -> gender(temp_zero,CTS)*.
12[0:Inp] ||  -> displayName(temp_zero,CTS)*.
11[0:Inp] ||  -> userId(temp_zero,CTS)*.
10[0:Inp] ||  -> password(temp_zero,CTS)*.
9[0:Inp] ||  -> username(temp_zero,CTS)*.
8[0:Inp] ||  -> public(temp_zero,CTS)*.
7[0:Inp] ||  -> sensitive(temp_zero,CTS)*.
6[0:Inp] ||  -> EndUser(temp_zero,CTS)*.
5[0:Inp] ||  -> CloudCustomer(temp_zero,CTS)*.
4[0:Inp] ||  -> CloudProvider(temp_zero,CTS)*.
3[0:Inp] ||  -> Auditor(temp_zero,CTS)*.
2[0:Inp] ||  -> DwDataController(temp_zero,CTS)*.
34[0:Inp] ||  -> DataController(temp_zero,wearableCo)*.
33[0:Inp] ||  -> DataSubject(temp_zero,customer2)*.
32[0:Inp] ||  -> Customer(temp_zero,kim)*.
29[0:Inp] ||  -> Customer(temp_zero,CTS)*.
24[0:Inp] ||  -> DataController(temp_zero,CTS)*.
23[0:Inp] ||  -> DataSubject(temp_zero,CTS)*.
31[0:Inp] ||  -> Actor(temp_zero,PO)*.
30[0:Inp] ||  -> Actor(temp_zero,auditor)*.
1[0:Inp] ||  -> Actor(temp_zero,CTS)*.
37[0:Inp] ||  -> DataProcessor(temp_zero,dataSpacer)*.
36[0:Inp] ||  -> DataProcessor(temp_zero,mapOnWeb)*.
35[0:Inp] ||  -> DataProcessor(temp_zero,cardioMon)*.
25[0:Inp] ||  -> DataProcessor(temp_zero,CTS)*.
38[0:Inp] ||  -> data(temp_zero,U)*.
39[0:Inp] || sixMonths(temp_zero) -> fiveMonths(temp_zero)*.
40[0:Inp] || sevenMonths(temp_zero)* -> sixMonths(temp_zero).
41[0:Inp] || data(temp_zero,skc0)* -> fiveMonths(temp_zero).
42[0:Inp] || sixMonths(temp_zero) -> delete(temp_zero,mapOnWeb,mapOnWeb,U)*.
43[0:Inp] || data(temp_zero,skc0) -> EQUAL(temp_zero,subject(skc1),kim)*.
44[0:Inp] || data(temp_zero,skc0) delete(temp_zero,mapOnWeb,mapOnWeb,skc1)* -> .
69[0:Inp] || requestDataCompliance(temp_zero,U,V,W) -> PrequestDataCompliance(temp_zero,U,V,W)*.
68[0:Inp] || viewActiveUsers(temp_zero,U,V,W) -> PviewActiveUsers(temp_zero,U,V,W)*.
67[0:Inp] || updateThresholds(temp_zero,U,V,W) -> PupdateThresholds(temp_zero,U,V,W)*.
66[0:Inp] || manageBusinessFormula(temp_zero,U,V,W) -> PmanageBusinessFormula(temp_zero,U,V,W)*.
65[0:Inp] || createBusinessProfile(temp_zero,U,V,W) -> PcreateBusinessProfile(temp_zero,U,V,W)*.
64[0:Inp] || receiveBreachNotif(temp_zero,U,V,W) -> PreceiveBreachNotif(temp_zero,U,V,W)*.
63[0:Inp] || receivePVA(temp_zero,U,V,W) -> PreceivePVA(temp_zero,U,V,W)*.
62[0:Inp] || receiveAlerts(temp_zero,U,V,W) -> PreceiveAlerts(temp_zero,U,V,W)*.
61[0:Inp] || requestDataPath(temp_zero,U,V,W) -> PrequestDataPath(temp_zero,U,V,W)*.
60[0:Inp] || requestStat(temp_zero,U,V,W) -> PrequestStat(temp_zero,U,V,W)*.
59[0:Inp] || getWellbeingScore(temp_zero,U,V,W) -> PgetWellbeingScore(temp_zero,U,V,W)*.
58[0:Inp] || getWellbeingTraining(temp_zero,U,V,W) -> PgetWellbeingTraining(temp_zero,U,V,W)*.
57[0:Inp] || updateWellbeing(temp_zero,U,V,W) -> PupdateWellbeing(temp_zero,U,V,W)*.
56[0:Inp] || requestRTI(temp_zero,U,V,W) -> PrequestRTI(temp_zero,U,V,W)*.
55[0:Inp] || submitRTI(temp_zero,U,V,W) -> PsubmitRTI(temp_zero,U,V,W)*.
53[0:Inp] || update(temp_zero,U,V,W) -> Pupdate(temp_zero,U,V,W)*.
52[0:Inp] || edit(temp_zero,U,V,W) -> Pedit(temp_zero,U,V,W)*.
51[0:Inp] || add(temp_zero,U,V,W) -> Padd(temp_zero,U,V,W)*.
50[0:Inp] || login(temp_zero,U,V,W) -> Plogin(temp_zero,U,V,W)*.
49[0:Inp] || createCustomerProfile(temp_zero,U,V,W) -> PcreateCustomerProfile(temp_zero,U,V,W)*.
48[0:Inp] || receiveTVA(temp_zero,U,V,W) -> PreceiveTVA(temp_zero,U,V,W)*.
47[0:Inp] || audit(temp_zero,U,V,W) -> Paudit(temp_zero,U,V,W)*.
46[0:Inp] || write(temp_zero,U,V,W) -> Pwrite(temp_zero,U,V,W)*.
45[0:Inp] || read(temp_zero,U,V,W) -> Pread(temp_zero,U,V,W)*.
54[0:Inp] || delete(temp_zero,U,V,W) -> Pdelete(temp_zero,U,V,W)*.
Eventuality Clauses:

TSPASS 0.95 
SPASS beiseite: Satisfiable.
Problem: tests/tmp_gen.fotl 
TSPASS derived 3 clauses, backtracked 0 clauses and kept 72 clauses.
Number of input clauses: 69
Number of eventualities: 0
Total number of generated clauses: 72
Number of forward-subsumed clauses: 0
Number of backward-subsumed clauses: 4
Total number of subsumed clauses: 4
Number of tautology clauses: 0
Number of clauses with different loop search markers: 0
Number of usable clauses left: 0
Number of worked-off clauses left: 68
Number of successful loop searches: 0
TSPASS allocated 586 KBytes.
TSPASS spent	0:00:00.01 (0.008998s) on the problem.
		0:00:00.00 (0.001s) for the input.
		0:00:00.00 (0.002s) for the FLOTTER CNF translation.
		0:00:00.00 (0s) for inferences.
		0:00:00.00 (0s) for the backtracking.
		0:00:00.00 (0s) for the reduction.

--------------------------TSPASS-STOP------------------------------
